# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-11 01:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) to Protect Service Applications using Bearer Token Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:12
msgid "This guide demonstrates how to use Quarkus OpenID Connect (OIDC) Extension to protect your JAX-RS applications using Bearer Token Authorization where Bearer Tokens are issued by OpenID Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org[Keycloak]."
msgstr "このガイドでは、Quarkus OpenID Connect (OIDC) Extensionを使用して、ベアラートークンがOpenID Connectや link:https://www.keycloak.org[Keycloak] などのOAuth 2.0準拠の認可サーバーによって発行されるベアラートークン認可を使用して、JAX-RSアプリケーションを保護する方法を説明します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:14
#, fuzzy
msgid "Bearer Token Authorization is the process of authorizing HTTP requests based on the existence and validity of a Bearer Token which provides valuable information to determine the subject of the call as well as whether an HTTP resource can be accessed."
msgstr "ベアラートークン認可とは、ベアラートークンの存在と有効性に基づいて HTTP リクエストを認証するプロセスで、HTTP リソースにアクセスできるかどうかだけでなく、呼び出しの対象を決定するための価値のある情報を提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:16
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize the users using OpenID Connect Authorization Code Flow."
msgstr "OpenID Connect 認可コードフローを使用してユーザーの認証と認可を行う必要がある場合は、 xref:security-openid-connect-web-authentication.adoc[OpenID Connect を使用したウェブアプリケーションの保護] ガイドをお読みください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:18
msgid "If you use Keycloak and Bearer tokens then also see the xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization] guide."
msgstr "Keycloak と Bearer トークンを使用する場合は、 xref:security-keycloak-authorization.adoc[Keycloakを使用して認可を中央管理]ガイドも参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:20
msgid "Please read the xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr "マルチテナントへの対応方法については、 xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナントの使用] ガイドをお読みください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect.adoc:21
#, no-wrap
msgid "Quickstart"
msgstr "クイックスタート"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:23
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:28
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:29
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:32
msgid "In this example, we build a very simple microservice which offers two endpoints:"
msgstr "この例では、2つのエンドポイントを提供する非常にシンプルなマイクロサービスを構築しています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:34
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:35
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:37
msgid "These endpoints are protected and can only be accessed if a client is sending a bearer token along with the request, which must be valid (e.g.: signature, expiration and audience) and trusted by the microservice."
msgstr "これらのエンドポイントは保護されており、クライアントがリクエストと一緒にベアラートークンを送信している場合にのみアクセスすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:39
msgid "The bearer token is issued by a Keycloak Server and represents the subject to which the token was issued for. For being an OAuth 2.0 Authorization Server, the token also references the client acting on behalf of the user."
msgstr "ベアラートークンは、Keycloakサーバーによって発行され、トークンが発行された対象を表します。OAuth 2.0 認可サーバーであるため、トークンはユーザーの代わりに動作するクライアントも参照します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:41
msgid "The `/api/users/me` endpoint can be accessed by any user with a valid token. As a response, it returns a JSON document with details about the user where these details are obtained from the information carried on the token."
msgstr "`/api/users/me` エンドポイントは、有効なトークンを持つ任意のユーザーがアクセスできます。レスポンスとして、トークンに記録されている情報から取得したユーザーの詳細を含む JSON ドキュメントを返します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:43
msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint."
msgstr "`/api/admin` エンドポイントは RBAC (Role-Based Access Control) で保護されており、 `admin` ロールで許可されたユーザーのみがアクセスできます。このエンドポイントでは、 `@RolesAllowed` アノテーションを使用して、アクセス制約を宣言的に強制します。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:44
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:48
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:50
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:52
msgid "The solution is located in the `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-quickstart` {quickstarts-tree-url}/security-openid-connect-quickstart[ディレクトリ] にあります。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:53
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:56
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:63
msgid "This command generates a Maven project, importing the `oidc` extension which is an implementation of OIDC for Quarkus."
msgstr "このコマンドは、QuarkusのOIDCの実装である `oidc` エクステンションをインポートして、Mavenプロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:66
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:71
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます。"

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect.adoc:73
#: upstream/_versions/main/guides/security-openid-connect.adoc:595
#: upstream/_versions/main/guides/security-openid-connect.adoc:622
#: upstream/_versions/main/guides/security-openid-connect.adoc:746
#: upstream/_versions/main/guides/security-openid-connect.adoc:838
#: upstream/_versions/main/guides/security-openid-connect.adoc:949
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:79
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect.adoc:82
#: upstream/_versions/main/guides/security-openid-connect.adoc:610
#: upstream/_versions/main/guides/security-openid-connect.adoc:632
#: upstream/_versions/main/guides/security-openid-connect.adoc:756
#: upstream/_versions/main/guides/security-openid-connect.adoc:848
#: upstream/_versions/main/guides/security-openid-connect.adoc:959
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:85
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr "implementation(\"io.quarkus:quarkus-oidc\")\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:87
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:90
msgid "Let's start by implementing the `/api/users/me` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/api/users/me` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:94
#: upstream/_versions/main/guides/security-openid-connect.adoc:137
#: upstream/_versions/main/guides/security-openid-connect.adoc:324
#: upstream/_versions/main/guides/security-openid-connect.adoc:785
#: upstream/_versions/main/guides/security-openid-connect.adoc:819
#, no-wrap
msgid "package org.acme.security.openid.connect;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:99
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:102
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.NoCache;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:105
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UsersResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:108
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:116
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/me\")\n"
"    @RolesAllowed(\"user\")\n"
"    @NoCache\n"
"    public User me() {\n"
"        return new User(securityIdentity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:118
#, no-wrap
msgid "    public static class User {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:120
#, no-wrap
msgid "        private final String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:124
#, no-wrap
msgid ""
"        User(SecurityIdentity securityIdentity) {\n"
"            this.userName = securityIdentity.getPrincipal().getName();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:130
#, no-wrap
msgid ""
"        public String getUserName() {\n"
"            return userName;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:133
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。ここでの主な違いは、 `admin` ロールで付与されたユーザーだけがエンドポイントにアクセスできるように `@RolesAllowed` アノテーションを使用していることです:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:143
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:146
#: upstream/_versions/main/guides/security-openid-connect.adoc:335
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:154
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:157
msgid "Injection of the `SecurityIdentity` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`SecurityIdentity` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:158
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:161
msgid "The OpenID Connect extension allows you to define the adapter configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID Connect エクステンションを使用すると、`src/main/resources` ディレクトリーに配置される `application.properties` ファイルを使用してアダプター設定を定義することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:165
msgid "Example configuration:"
msgstr "設定例:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:171
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=backend-service\n"
"quarkus.oidc.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:174
#, no-wrap
msgid ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes\n"
msgstr ""
"# Tell Dev Services for Keycloak to import the realm file\n"
"# This property is not effective when running the application in JVM or Native modes\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:176
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:179
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in a dev mode. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information."
msgstr "`quarkus.oidc.auth-server-url` に `%prod.` プロファイル接頭辞を追加すると、アプリケーションが開発モードで実行されているときに、`Dev Services for Keycloak` がコンテナーを起動するようになります。詳細については、以下の <<keycloak-dev-mode, Running the Application in Dev mode>> セクションを参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:180
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:183
msgid "Do not start the Keycloak server when you run the application in a dev mode - `Dev Services for Keycloak` will launch a container. See <<keycloak-dev-mode, Running the Application in Dev mode>> section below for more information. Make sure to put the {quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode - unless you have already built a {quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] in which case this realm file will be added to the classpath during the build."
msgstr "アプリケーションを開発モードで実行しているときは、Keycloak サーバーを起動しないでください。`Dev Services for Keycloak` はコンテナーを起動します。詳細については、以下の <<keycloak-dev-mode, Running the Application in Dev mode>> セクションを参照してください。{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[レルム設定ファイル] をクラスパス (`target/classes` ディレクトリー) に配置して、開発モードで実行しているときに自動的にインポートされるようにします (すでに {quickstarts-tree-url}/security-openid-connect-quickstart[完全なソリューション] をビルドしている場合を除く (このレルムファイルはビルド時にクラスパスに追加されます))。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:185
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:189
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:192
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:194
#, fuzzy
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "Keycloakサーバーには、 link:http://localhost:8180/auth[localhost:8180/auth] でアクセスできるはずです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:196
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:198
msgid "Import the {quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "新しいレルムを作成するには、{quickstarts-tree-url}/security-openid-connect-quickstart/config/quarkus-realm.json[realm設定ファイル] をインポートします。 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムを作成する] 方法について詳しくはKeycloakのドキュメントを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:202
#, fuzzy
msgid "If you want to use the Keycloak Admin Client to configure your server from your application you need to include the either `quarkus-keycloak-admin-client` or the `quarkus-keycloak-admin-client-reactive` (if the application uses `quarkus-rest-client-reactive`) extension.  See the xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client] guide for more information."
msgstr "Keycloak Admin Clientを使用して、アプリケーションからサーバーを設定したい場合は、 `quarkus-keycloak-admin-client` エクステンションを含める必要があります。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:204
#, fuzzy, no-wrap
msgid "Running the Application in Dev mode"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:207
#, fuzzy
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:211
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:213
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev[/q/dev] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr "http://localhost:8080/q/dev[/q/dev] で入手可能な xref:dev-ui.adoc[Dev UI] を開き、`OpenID Connect` `Dev UI` の `Provider: Keycloak` リンクをクリックします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:215
msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` へのログインを求められます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:217
msgid "Login as `alice` (password: `alice`) who has a `user` role"
msgstr "`user` のロールを持つ `alice` (パスワード: `alice`) としてログインします"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:218
msgid "accessing `/api/admin` will return `403`"
msgstr "`/api/admin` にアクセスすると、`403` が返されます"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:219
#: upstream/_versions/main/guides/security-openid-connect.adoc:222
msgid "accessing `/api/users/me` will return `200`"
msgstr "`/api/users/me` にアクセスすると、`200` が返されます"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:220
msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
msgstr "ログアウトし、`admin` と `user` ロールの両方を持つ `admin` (パスワード: `admin`) としててログインします"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:221
msgid "accessing `/api/admin` will return `200`"
msgstr "`/api/admin` にアクセスすると、`200` が返されます"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:223
#, fuzzy, no-wrap
msgid "Running the Application in JVM mode"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:226
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "「`dev` モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:228
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:232
msgid "Then run it:"
msgstr "そして、以下のように実行します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:236
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr "java -jar target/quarkus-app/quarkus-run.jar\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:238
#, fuzzy, no-wrap
msgid "Running the Application in Native Mode"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:241
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:245
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:248
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:252
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:256
#, no-wrap
msgid "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"
msgstr "./target/security-openid-connect-quickstart-1.0.0-SNAPSHOT-runner\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:258
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:261
msgid "See <<keycloak-dev-mode, Running the Application in Dev mode>> section above about testing your application in a dev mode."
msgstr "開発モードでのアプリケーションのテストについては、上記の <<keycloak-dev-mode, Running the Application in Dev mode>> セクションを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:263
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:266
msgid "The application is using bearer token authorization and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
msgstr "アプリケーションはベアラートークン認可を使用しており、まず最初に行うべきことは、アプリケーションのリソースにアクセスするためにKeycloak サーバーからアクセストークンを取得することです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:275
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=alice&password=alice&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:278
msgid "The example above obtains an access token for user `alice`."
msgstr "上記の例では、ユーザー `alice` のアクセストークンを取得しています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:282
msgid "Any user is allowed to access the `http://localhost:8080/api/users/me` endpoint which basically returns a JSON payload with details about the user."
msgstr "どのユーザーでも `http://localhost:8080/api/users/me` エンドポイントで、基本的にはユーザーに関する詳細な情報を含む JSON ペイロードを返します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:288
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"  http://localhost:8080/api/users/me \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"
msgstr ""
"curl -v -X GET \\\n"
"  http://localhost:8080/api/users/me \\\n"
"  -H \"Authorization: Bearer \"$access_token\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:293
#, no-wrap
msgid ""
"The `http://localhost:8080/api/admin` endpoint can only be accessed by users with the `admin` role. If you try to access this endpoint with the\n"
" previously issued access token, you should get a `403` response\n"
" from the server.\n"
msgstr "`http://localhost:8080/api/admin` エンドポイントは、 `admin` ロールを持つユーザーのみがアクセスできます。以前に発行されたアクセストークンを使用してこのエンドポイントにアクセスしようとすると、サーバーから `403` 応答が返ってくるはずです。\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:299
#, no-wrap
msgid ""
"curl -v -X GET \\\n"
"   http://localhost:8080/api/admin \\\n"
"   -H \"Authorization: Bearer \"$access_token\n"
msgstr ""
"curl -v -X GET \\\n"
"   http://localhost:8080/api/admin \\\n"
"   -H \"Authorization: Bearer \"$access_token\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:302
msgid "In order to access the admin endpoint you should obtain a token for the `admin` user:"
msgstr "admin エンドポイントにアクセスするには、 `admin` ユーザーのトークンを取得する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:311
#, no-wrap
msgid ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"
msgstr ""
"export access_token=$(\\\n"
"    curl --insecure -X POST http://localhost:8180/realms/quarkus/protocol/openid-connect/token \\\n"
"    --user backend-service:secret \\\n"
"    -H 'content-type: application/x-www-form-urlencoded' \\\n"
"    -d 'username=admin&password=admin&grant_type=password' | jq --raw-output '.access_token' \\\n"
" )\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:314
msgid "Please also see the <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> section below about writing the integration tests which depend on `Dev Services for Keycloak`."
msgstr "`Dev Services for Keycloak` に依存する統合テストの作成については、以下の <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> セクションも参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect.adoc:315
#, fuzzy, no-wrap
msgid "Reference Guide"
msgstr "リファレンス"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:317
#, no-wrap
msgid "Accessing JWT claims"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:320
msgid "If you need to access JWT token claims then you can inject `JsonWebToken`:"
msgstr "JWT トークンクレームにアクセスする必要がある場合は、`JsonWebToken` を注入できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:332
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import javax.inject.Inject;\n"
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import javax.inject.Inject;\n"
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:338
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt;\n"
msgstr ""
"    @Inject\n"
"    JsonWebToken jwt;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:346
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"Access for subject \" + jwt.getSubject() + \" is granted\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"Access for subject \" + jwt.getSubject() + \" is granted\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:349
msgid "Injection of `JsonWebToken` is supported in `@ApplicationScoped`, `@Singleton` and `@RequestScoped` scopes however the use of `@RequestScoped` is required if the individual claims are injected as simple types, please see xref:security-jwt.adoc#supported-injection-scopes[Support Injection Scopes for JsonWebToken and Claims] for more details."
msgstr "`JsonWebToken` の注入は、`@ApplicationScoped`、`@Singleton`、および `@RequestScoped` スコープでサポートされていますが、個々のクレームがシンプル型として注入される場合は、`@RequestScoped` の使用が必要です。xref:security-jwt を参照してください。詳細については、xref:security-jwt.adoc#supported-injection-scopes[JsonWebToken およびクレームの注入スコープのサポート] を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:351
#, no-wrap
msgid "User Info"
msgstr "ユーザー情報"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:356
msgid "Set `quarkus.oidc.authentication.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.  A request will be sent to the OpenID Provider UserInfo endpoint and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created.  `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "OIDC userinfo エンドポイントから UserInfo JSON オブジェクトを要求する必要がある場合は `quarkus.oidc.authentication.user-info-required=true` を設定します。リクエストが OpenId Provider UserInfo エンドポイントに送信され、 `io.quarkus.oidc.UserInfo` (単純な `javax.json.JsonObject` ラッパー) オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` は、SecurityIdentity `userinfo` 属性として注入、アクセスすることもできます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:358
#, no-wrap
msgid "Configuration Metadata"
msgstr "設定メタデータ"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:361
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントが検出した link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 設定メタデータ] は `io.quarkus.oidc.OidcConfigurationMetadata` で表され、`SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスが可能です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:363
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントがパブリックの場合、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:364
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "トークンクレームとセキュリティーアイデンティティロール"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:367
msgid "SecurityIdentity roles can be mapped from the verified JWT access tokens as follows:"
msgstr "SecurityIdentity ロールは、検証済みの JWT アクセストークンから以下のようにマッピングすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:370
msgid "If `quarkus.oidc.roles.role-claim-path` property is set and matching array or string claims are found then the roles are extracted from these claims.  For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`, etc."
msgstr "`quarkus.oidc.roles.role-claim-path` プロパティーが設定されており、一致する配列または文字列のクレームが見つかった場合、このクレームからロールが抽出されます。例えば、`customroles`、`customroles/array`、`scope`、`\"http://namespace-qualified-custom-claim\"/roles`、`\"http://namespace-qualified-roles\"` などです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:371
msgid "If `groups` claim is available then its value is used"
msgstr "`groups` クレームが利用可能な場合は、その値が使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:373
msgid "If `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available then its value is used.  This check supports the tokens issued by Keycloak"
msgstr "`realm_access/roles` または `resource_access/client_id/roles` (ここで `client_id` は `quarkus.oidc.client-id` プロパティーの値)クレームが利用可能な場合は、その値が使用されます。このチェックは、Keycloakが発行するトークンをサポートします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:375
msgid "If the token is opaque (binary) then a `scope` property from the remote token introspection response will be used."
msgstr "トークンが不透明(バイナリー)の場合は、リモートトークンイントロスペクションレスポンスの `scope` プロパティーが使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:377
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "UserInfoがロールのソースである場合は、 `quarkus.oidc.authentication.user-info-required=true` と `quarkus.oidc.roles.source=userinfo` 、必要に応じて `quarkus.oidc.roles.role-claim-path` を設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:379
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented xref:security.adoc#security-identity-customization[here]."
msgstr "さらに、カスタム `SecurityIdentityAugmentor` を使用して、xref:security.adoc#security-identity-customization[ここ] に文書化されているようにロールを追加することもできます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:381
#, no-wrap
msgid "Token Verification And Introspection"
msgstr "トークンの検証とイントロスペクション"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:386
msgid "If the token is a JWT token then, by default, it will be verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet` retrieved from the OpenID Connect Provider's JWK endpoint. The token's key identifier `kid` header value will be used to find the matching JWK key.  If no matching `JWK` is available locally then `JsonWebKeySet` will be refreshed by fetching the current key set from the JWK endpoint. The `JsonWebKeySet` refresh can be repeated only after the `quarkus.oidc.token.forced-jwk-refresh-interval` (default is 10 minutes) expires.  If no matching `JWK` is available after the refresh then the JWT token will be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:388
msgid "If the token is opaque (it can be a binary token or an encrypted JWT token) then it will always be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr "トークンが不透明な場合 (バイナリートークンまたは暗号化された JWT トークンの場合があります)、常に OpenID Connectプロバイダーのトークンイントロスペクションエンドポイントに送信されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:390
msgid "If you work with JWT tokens only and expect that a matching `JsonWebKey` will always be available (possibly after a key set refresh) then you should disable the token introspection:"
msgstr "JWT トークンのみを使用していて、一致する `JsonWebKey` が常に使用可能になると予想される場合 (おそらくキーセットの更新後)、トークンのイントロスペクションを無効にする必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:395
#, no-wrap
msgid ""
"quarkus.oidc.token.allow-jwt-introspection=false\n"
"quarkus.oidc.token.allow-opaque-token-introspection=false\n"
msgstr ""
"quarkus.oidc.token.allow-jwt-introspection=false\n"
"quarkus.oidc.token.allow-opaque-token-introspection=false\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:398
msgid "However, there could be cases where JWT tokens must be verified via the introspection only. It can be forced by configuring an introspection endpoint address only, for example, in case of Keycloak you can do it like this:"
msgstr "ただし、JWT トークンをイントロスペクションのみで検証する必要がある場合があります。イントロスペクションエンドポイントアドレスのみを設定することで強制できます。たとえば、Keycloak の場合は、次のように設定できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:405
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:408
msgid "An advantage of this indirect enforcement of JWT tokens being only introspected remotely is that two remote call are avoided: a remote OIDC metadata discovery call followed by another remote call fetching the verification keys which will not be used, while its disavantage is that the users need to know the introspection endpoint address and configure it manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:410
msgid "The alternative approach is to allow discovering the OIDC metadata (which is a default option) but require that only the remote JWT introspection is performed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:415
#, fuzzy, no-wrap
#| msgid ""
#| "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
#| "quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.token.require-jwt-introspection-only=true\n"
msgstr ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:418
msgid "An advantage of this approach is that the configuration is simple and easy to understand, while its disavantage is that a remote OIDC metadata discovery call is required to discover an introspection endpoint address (though the verification keys will also not be fetched)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:420
msgid "Note that `io.quarkus.oidc.TokenIntrospection` (a simple `javax.json.JsonObject` wrapper) object will be created and can be either injected or accessed as a SecurityIdentity `introspection` attribute if either JWT or opaque token has been successfully introspected."
msgstr "`io.quarkus.oidc.TokenIntrospection` (シンプルな `javax.json.JsonObject` ラッパー) オブジェクトが作成され、JWT または不透明トークンどちらかのイントロスペクションが成功した場合に SecurityIdentity `introspection` 属性として注入またはアクセスできることに注意してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:422
#, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr "トークンイントロスペクションと UserInfo キャッシュ"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:425
msgid "All opaque and sometimes JWT Bearer access tokens have to be remotely introspected. If `UserInfo` is also required then the same access token will be used to do a remote call to OpenID Connect Provider again. So, if `UserInfo` is required and the current access token is opaque then for every such token there will be 2 remote calls done - one to introspect it and one to get UserInfo with it, and if the token is JWT then usually only a single remote call will be needed - to get UserInfo with it."
msgstr "すべての不透明な、場合によっては JWT Bearer アクセストークンは、リモートで検査する必要があります。`UserInfo` も必要な場合は、同じアクセストークンを使用して OpenID Connectプロバイダーへのリモート呼び出しを再度実行します。したがって、`UserInfo` が必要で、現在のアクセストークンが不透明な場合、そのようなトークンごとに 2 つのリモート呼び出しが行われます。1 つはそれを検査し、もう 1 つは UserInfo を取得します。トークンが JWT の場合、通常は UserInfo を取得するには、1 回のリモート呼び出しだけが必要になります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:427
msgid "The cost of making up to 2 remote calls per every incoming bearer or code flow access token can sometimes be problematic."
msgstr "着信ベアラーまたはコードフローアクセストークンごとに最大 2 つのリモート呼び出しを行うコストが、問題になる場合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:429
msgid "If it is the case in your production then it can be recommended that the token introspection and `UserInfo` data are cached for a short period of time, for example, for 3 or 5 minutes."
msgstr "本番環境でこれに当てはまる場合は、トークンのイントロスペクションと `UserInfo` データを短時間、たとえば 3 - 5 分間キャッシュすることをお勧めします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:431
msgid "`quarkus-oidc` provides `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces which can be used to implement `@ApplicationScoped` cache implementation which can be used to store and retrieve `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` objects, for example:"
msgstr "`quarkus-oidc` は `quarkus.oidc.TokenIntrospectionCache` と `quarkus.oidc.UserInfoCache` インターフェイスを提供します。これらは `@ApplicationScoped` キャッシュ実装を実装するために使用できます。これらは `quarkus.oidc.TokenIntrospection` や `quarkus.oidc.UserInfo` オブジェクトを取得および保存するのに使用できます。以下に例を示します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:439
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@AlternativePriority(1)\n"
"public class CustomIntrospectionUserInfoCache implements TokenIntrospectionCache, UserInfoCache {\n"
"...\n"
"}\n"
msgstr ""
"@ApplicationScoped\n"
"@AlternativePriority(1)\n"
"public class CustomIntrospectionUserInfoCache implements TokenIntrospectionCache, UserInfoCache {\n"
"...\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:442
msgid "Each OIDC tenant can either permit or deny storing its `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` data with boolean `quarkus.oidc.\"tenant\".allow-token-introspection-cache` and `quarkus.oidc.\"tenant\".allow-user-info-cache` properties."
msgstr "各 OIDC テナントは、ブール値 `quarkus.oidc.\"tenant\".allow-token-introspection-cache` および `quarkus.oidc.\"tenant\".allow-user-info-cache` プロパティーを使用して、その `quarkus.oidc.TokenIntrospection` や `quarkus.oidc.UserInfo` データを保存することを許可または拒否できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:444
msgid "Additionally, `quarkus-oidc` provides a simple default memory based token cache which implements both `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces."
msgstr "さらに、`quarkus-oidc` は、`quarkus.oidc.TokenIntrospectionCache` および `quarkus.oidc.UserInfoCache` インターフェイスの両方を実装するシンプルなデフォルトのメモリーベースのトークンキャッシュを提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:446
msgid "It can be activated and configured as follows:"
msgstr "これは、次のようにアクティブ化および設定できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:455
#, no-wrap
msgid ""
"# 'max-size' is 0 by default so the cache can be activated by setting 'max-size' to a positive value.\n"
"quarkus.oidc.token-cache.max-size=1000\n"
"# 'time-to-live' specifies how long a cache entry can be valid for and will be used by a cleanup timer.\n"
"quarkus.oidc.token-cache.time-to-live=3M\n"
"# 'clean-up-timer-interval' is not set by default so the cleanup timer can be activated by setting 'clean-up-timer-interval'.\n"
"quarkus.oidc.token-cache.clean-up-timer-interval=1M\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:458
msgid "The default cache uses a token as a key and each entry can have `TokenIntrospection` and/or `UserInfo`. It will only keep up to a `max-size` number of entries. If the cache is full when a new entry is to be added then an attempt will be made to find a space for it by removing a single expired entry. Additionally, the cleanup timer, if activated, will periodically check for the expired entries and remove them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:460
msgid "Please experiment with the default cache implementation or register a custom one."
msgstr "デフォルトのキャッシュ実装を試すか、カスタム実装を登録してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:462
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:465
msgid "Once the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr "ベアラのJWTトークンの署名が検証され、 `expires at` ( `exp`) のクレームが確認されると、次に `iss` ( `issuer`) クレーム値が検証されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:468
msgid "By default, the `iss` claim value is compared to the `issuer` property which may have been discovered in the well-known provider configuration.  But if `quarkus.oidc.token.issuer` property is set then the `iss` claim value is compared to it instead."
msgstr "デフォルトでは、 `iss` クレーム値は、well-knownプロバイダの設定で発見された `issuer` プロパティと比較されます。しかし、 `quarkus.oidc.token.issuer` プロパティが設定されている場合は、代わりに `iss` クレーム値がそれと比較されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:470
msgid "In some cases, this `iss` claim verification may not work. For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address. Or when a discovered `issuer` property contains the template tenant variable but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr "場合によっては、この `iss` クレームの検証がうまくいかないことがあります。例えば、発見された `issuer` プロパティに内部の HTTP/IP アドレスが含まれている一方で、トークン `iss` クレーム値に外部の HTTP/IP アドレスが含まれている場合です。あるいは、発見された `issuer` プロパティにテンプレートのテナント変数が含まれているが、トークン `iss` クレーム値には完全なテナント固有の発行者の値が含まれている場合です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:472
msgid "In such cases you may want to consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`. Please note that it is not recommended and should be avoided unless no other options are available:"
msgstr "このような場合には、 `quarkus.oidc.token.issuer=any` を設定して、issuer認証を省略することを検討してください。なお、この設定は推奨されておらず、他に選択肢がない場合を除き、避けるべきです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:474
msgid "If you work with Keycloak and observe the issuer verification errors due to the different host addresses then configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr "Keycloakを使用していて、ホストアドレスが異なるために発行者検証エラーが発生する場合は、Keycloakに `KEYCLOAK_FRONTEND_URL` プロパティを設定して、同じホストアドレスが使用されるようにしてください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:475
msgid "If the `iss` property is tenant specific in a multi-tenant deployment then you can use the `SecurityIdentity` `tenant-id` attribute to check the issuer is correct in the endpoint itself or the custom JAX-RS filter, for example:"
msgstr "マルチテナント展開で `iss` プロパティがテナント固有のものである場合は、 `SecurityIdentity` `tenant-id` 属性を使用して、エンドポイント自体やカスタム JAX-RS フィルタなどでissuerが正しいかどうかを確認することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:482
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.ext.Provider;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:486
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:491
#, no-wrap
msgid ""
"@Provider\n"
"public class IssuerValidator implements ContainerRequestFilter {\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""
"@Provider\n"
"public class IssuerValidator implements ContainerRequestFilter {\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:494
#, no-wrap
msgid ""
"    @Inject JsonWebToken jwt;\n"
"    @Inject SecurityIdentity identity;\n"
msgstr ""
"    @Inject JsonWebToken jwt;\n"
"    @Inject SecurityIdentity identity;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:502
#, no-wrap
msgid ""
"    public void filter(ContainerRequestContext requestContext) {\n"
"        String issuer = configMetadata.getIssuer().replace(\"{tenant-id}\", identity.getAttribute(\"tenant-id\"));\n"
"        if (!issuer.equals(jwt.getIssuer())) {\n"
"            requestContext.abortWith(Response.status(401).build());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
"    public void filter(ContainerRequestContext requestContext) {\n"
"        String issuer = configMetadata.getIssuer().replace(\"{tenant-id}\", identity.getAttribute(\"tenant-id\"));\n"
"        if (!issuer.equals(jwt.getIssuer())) {\n"
"            requestContext.abortWith(Response.status(401).build());\n"
"        }\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:505
msgid "Note it is also recommended to use `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr "なお、トークン `aud` ( `audience`) のクレーム値を検証するために `quarkus.oidc.token.audience` プロパティを使用することも推奨します。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:507
#, no-wrap
msgid "Single Page Applications"
msgstr "シングルページアプリケーション"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:511
msgid "Single Page Application (SPA) typically uses `XMLHttpRequest`(XHR) and the JavaScript utility code provided by the OpenID Connect provider to acquire a bearer token and use it to access Quarkus `service` applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:513
msgid "For example, here is how you can use `keycloak.js` to authenticate the users and refresh the expired tokens from the SPA:"
msgstr "例えば、 `keycloak.js` を使用してユーザーを認証し、SPA から期限切れのトークンをリフレッシュする方法は以下の通りです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:552
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"    <title>keycloak-spa</title>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n"
"    <script src=\"http://localhost:8180/js/keycloak.js\"></script>\n"
"    <script>\n"
"        var keycloak = new Keycloak();\n"
"        keycloak.init({onLoad: 'login-required'}).success(function () {\n"
"            console.log('User is now authenticated.');\n"
"        }).error(function () {\n"
"            window.location.reload();\n"
"        });\n"
"        function makeAjaxRequest() {\n"
"            axios.get(\"/api/hello\", {\n"
"                headers: {\n"
"                    'Authorization': 'Bearer ' + keycloak.token\n"
"                }\n"
"            })\n"
"            .then( function (response) {\n"
"                console.log(\"Response: \", response.status);\n"
"            }).catch(function (error) {\n"
"                console.log('refreshing');\n"
"                keycloak.updateToken(5).then(function () {\n"
"                    console.log('Token refreshed');\n"
"                }).catch(function () {\n"
"                    console.log('Failed to refresh token');\n"
"                    window.location.reload();\n"
"                });\n"
"            });\n"
"    }\n"
"    </script>\n"
"</head>\n"
"<body>\n"
"    <button onclick=\"makeAjaxRequest()\">Request</button>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:554
#, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:557
msgid "If you plan to consume your OpenID Connect `service` application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr "別のドメインで動作する Single Page Application から OpenID Connect `service` アプリケーションを利用する場合は、CORS (Cross-Origin Resource Sharing) を設定する必要があります。詳細については、 link:http-reference.html#cors-filter[HTTP CORSのドキュメント]を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:558
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr "プロバイダーエンドポイント設定"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:561
msgid "OIDC `service` application needs to know OpenID Connect provider's token, `JsonWebKey` (JWK) set and possibly `UserInfo` and introspection endpoint addresses."
msgstr "OIDC `service` アプリケーションは、OpenID Connect プロバイダのトークン、 `JsonWebKey` (JWK) セット、そして時には `UserInfo` とイントロスペクションのエンドポイントアドレスを知る必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:563
#, fuzzy
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` パスを追加することで検出されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:565
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available, or if you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、相対パスの値で設定することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:578
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:580
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:583
msgid "Please see xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:585
#, fuzzy, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr "プロバイダーエンドポイント設定"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:588
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. If the bearer token has to be introspected then `OidcProviderClient` has to authenticate to the OpenID Connect Provider. Please see xref:security-openid-connect-web-authentication.adoc#oidc-provider-client-authentication[OidcProviderClient Authentication] for more information about all the supported authentication options."
msgstr "`quarkus.oidc.runtime.OidcProviderClient` は、OpenID Connect プロバイダーへのリモートリクエストを実行する必要がある場合に使用されます。ベアラートークンを検査する必要がある場合は、`OidcProviderClient` が OpenID Connect プロバイダーに対して認証する必要があります。サポートされているすべての認証オプションの詳細については、xref:security-openid-connect-web-authentication.adoc#oidc-provider-client-authentication[Oidc Provider Client Authentication] を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:590
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:593
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:607
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:614
#, no-wrap
msgid ""
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect.adoc:617
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:620
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:629
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:635
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:638
#: upstream/_versions/main/guides/security-openid-connect.adoc:877
msgid "Prepare the REST test endpoint, set `application.properties`, for example:"
msgstr "RESTテストエンドポイントを用意し、例えば以下のように `application.properties` を設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:645
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.application-type=service\n"
msgstr ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.application-type=service\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:648
#: upstream/_versions/main/guides/security-openid-connect.adoc:888
msgid "and finally write the test code, for example:"
msgstr "最後に、例えば次のようにテストコードを書きます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:652
#, no-wrap
msgid "import static org.hamcrest.Matchers.equalTo;\n"
msgstr "import static org.hamcrest.Matchers.equalTo;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:654
#, no-wrap
msgid "import java.util.Set;\n"
msgstr "import java.util.Set;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:656
#: upstream/_versions/main/guides/security-openid-connect.adoc:708
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr "import org.junit.jupiter.api.Test;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:662
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
"import io.restassured.RestAssured;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
"import io.restassured.RestAssured;\n"
"import io.smallrye.jwt.build.Jwt;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:666
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class BearerTokenAuthorizationTest {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:676
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\", Set.of(\"user\")))\n"
"            .when().get(\"/api/users/me\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\", Set.of(\"user\")))\n"
"            .when().get(\"/api/users/me\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:685
#, no-wrap
msgid ""
"    private String getAccessToken(String userName, Set<String> groups) {\n"
"        return Jwt.preferredUserName(userName)\n"
"                .groups(groups)\n"
"                .issuer(\"https://server.example.com\")\n"
"                .audience(\"https://service.example.com\")\n"
"                .sign();\n"
"    }\n"
"}\n"
msgstr ""
"    private String getAccessToken(String userName, Set<String> groups) {\n"
"        return Jwt.preferredUserName(userName)\n"
"                .groups(groups)\n"
"                .issuer(\"https://server.example.com\")\n"
"                .audience(\"https://service.example.com\")\n"
"                .sign();\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:688
msgid "Note that the `quarkus-test-oidc-server` extension includes a signing RSA private key file in a `JSON Web Key` (`JWK`) format and points to it with a `smallrye.jwt.sign.key.location` configuration property. It allows to use a no argument `sign()` operation to sign the token."
msgstr "`quarkus-test-oidc-server` 拡張機能には、`JSON Web Key` (`JWK`) 形式の署名 RSA 秘密鍵ファイルが含まれており、`smallrye.jwt.sign.key.location` 設定プロパティーでそれをポイントすることに注意してください。引数なしの `sign ()` 操作を使用してトークンに署名できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:691
msgid "Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage as even the communication channel is tested against the Wiremock HTTP stubs.  `OidcWiremockTestResource` will be enhanced going forward to support more complex Bearer token test scenarios."
msgstr "`quarkus-oidc` `service` アプリケーションを `OidcWiremockTestResource` でテストすると、通信チャネルが Wiremock HTTP スタブに対してテストされるため、最高のカバレッジが得られます。 `OidcWiremockTestResource` は、より複雑な Bearer トークンのテストシナリオをサポートするために、今後強化される予定です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:694
msgid "If there is an immediate need for a test to define Wiremock stubs not currently supported by `OidcWiremockTestResource` one can do so via a `WireMockServer` instance injected into the test class, for example:"
msgstr "現在 `OidcWiremockTestResource` でサポートされていない Wiremock スタブを定義するテストがすぐに必要な場合は、テストクラスに注入された `WireMockServer` インスタンスを介して行うことができます。次に例を示します。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect.adoc:698
msgid "`OidcWiremockTestResource` does not work with `@QuarkusIntegrationTest` against Docker containers, because the Wiremock server is running in the JVM running the test, which cannot be accessed from the Docker container running the Quarkus application."
msgstr "Wiremock サーバーはテストを実行している JVM で実行されており、Quarkus アプリケーションを実行している Docker コンテナーからはアクセスできないため、`OidcWiremockTestResource` は Docker コンテナーに対して `@QuarkusIntegrationTest` では機能しません。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:703
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr "package io.quarkus.it.keycloak;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:706
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static org.hamcrest.Matchers.equalTo;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:711
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
msgstr ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:715
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWireMock;\n"
"import io.restassured.RestAssured;\n"
msgstr ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWireMock;\n"
"import io.restassured.RestAssured;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:718
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CustomOidcWireMockStubTest {\n"
msgstr ""
"@QuarkusTest\n"
"public class CustomOidcWireMockStubTest {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:721
#, no-wrap
msgid ""
"    @OidcWireMock\n"
"    WireMockServer wireMockServer;\n"
msgstr ""
"    @OidcWireMock\n"
"    WireMockServer wireMockServer;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:727
#, no-wrap
msgid ""
"    @Test\n"
"    public void testInvalidBearerToken() {\n"
"        wireMockServer.stubFor(WireMock.post(\"/auth/realms/quarkus/protocol/openid-connect/token/introspect\")\n"
"                .withRequestBody(matching(\".*token=invalid_token.*\"))\n"
"                .willReturn(WireMock.aResponse().withStatus(400)));\n"
msgstr ""
"    @Test\n"
"    public void testInvalidBearerToken() {\n"
"        wireMockServer.stubFor(WireMock.post(\"/auth/realms/quarkus/protocol/openid-connect/token/introspect\")\n"
"                .withRequestBody(matching(\".*token=invalid_token.*\"))\n"
"                .willReturn(WireMock.aResponse().withStatus(400)));\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:735
#, no-wrap
msgid ""
"        RestAssured.given().auth().oauth2(\"invalid_token\").when()\n"
"                .get(\"/api/users/me/bearer\")\n"
"                .then()\n"
"                .statusCode(401)\n"
"                .header(\"WWW-Authenticate\", equalTo(\"Bearer\"));\n"
"    }\n"
"}\n"
msgstr ""
"        RestAssured.given().auth().oauth2(\"invalid_token\").when()\n"
"                .get(\"/api/users/me/bearer\")\n"
"                .then()\n"
"                .statusCode(401)\n"
"                .header(\"WWW-Authenticate\", equalTo(\"Bearer\"));\n"
"    }\n"
"}\n"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect.adoc:738
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Dev Services for Keycloak"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:742
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "Keycloak に対する統合テストには、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を使用することをお勧めします。`Dev Services for Keycloak` は、テストコンテナーを起動して初期化します。これにより、`quarkus` レルム、`quarkus-app` クライアント (`secret` シークレット) が作成され、`alice` (`admin` および `user` ロール) および `bob` (`user` ロール) ユーザーが追加されます。これらのプロパティーはすべてカスタマイズできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:744
msgid "First you need to add the following dependency:"
msgstr "まず、次の依存関係を追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:753
#: upstream/_versions/main/guides/security-openid-connect.adoc:845
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:759
#: upstream/_versions/main/guides/security-openid-connect.adoc:851
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:762
msgid "which provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` you can use in tests for acquiring the access tokens."
msgstr "これは、アクセストークンを取得するためのテストで使用できるユーティリティークラス `io.quarkus.test.keycloak.client.KeycloakTestClient` を提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:764
msgid "Next prepare your `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "次に、`application.properties` を準備します。完全に空の `application.properties` から始めることができます。これは、`Dev Services for Keycloak` が実行中のテストコンテナーをポイントする `quarkus.oidc.auth-server-url` ならびに `quarkus.oidc.client-id=quarkus-app` および `quarkus.oidc.credentials.secret=secret` を登録するためです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:766
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "ただし、必要なすべての `quarkus-oidc` プロパティーがすでに設定されている場合は、`quarkus.oidc.auth-server-url` を `Dev Services for Keycloak` の `prod` プロファイルに関連付けるだけでコンテナーを起動できます。以下に例を示します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:770
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:773
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルを Keycloak にインポートする必要がある場合は、次のように `Dev Services for Keycloak` を設定できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:778
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:781
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:790
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
"import org.junit.jupiter.api.Test;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:793
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class BearerTokenAuthenticationTest {\n"
msgstr ""
"@QuarkusTest\n"
"public class BearerTokenAuthenticationTest {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:795
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:807
#, no-wrap
msgid ""
"    @Test\n"
"    public void testAdminAccess() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(200);\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"bob\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(403);\n"
"    }\n"
msgstr ""
"    @Test\n"
"    public void testAdminAccess() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(200);\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"bob\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(403);\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:812
#, no-wrap
msgid ""
"    protected String getAccessToken(String userName) {\n"
"        return keycloakClient.getAccessToken(userName);\n"
"    }\n"
"}\n"
msgstr ""
"    protected String getAccessToken(String userName) {\n"
"        return keycloakClient.getAccessToken(userName);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:815
msgid "and in native mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:821
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:825
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class NativeBearerTokenAuthenticationIT extends BearerTokenAuthenticationTest {\n"
"}\n"
msgstr ""
"@QuarkusIntegrationTest\n"
"public class NativeBearerTokenAuthenticationIT extends BearerTokenAuthenticationTest {\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:828
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "初期化および設定方法の詳細については、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を参照してください。"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect.adoc:830
#, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr "KeycloakTestResourceLifecycleManager"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:834
msgid "If you need to do some integration testing against Keycloak then you are encouraged to do it with <<integration-testing-keycloak-devservices,Dev Services For Keycloak>>.  Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr "Keycloak に対して統合テストを行う必要がある場合は、<<integration-testing-keycloak-devservices,Dev Services For Keycloak>> で行うことをお勧めします。`Dev Services for Keycloak` を使用しない正当な理由がある場合にのみ、テストに `KeycloakTestResourceLifecycleManager` を使用してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:836
msgid "Start with adding the following dependency:"
msgstr "以下の依存関係を追加することから始めます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:854
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "これは、Keycloak コンテナーを開始する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装である `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` を提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:856
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "そして、Maven Surefire プラグインを次のように設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:872
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:875
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr "(同様に、ネイティブイメージでテストする場合は `maven.failsafe.plugin`)。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:885
#, no-wrap
msgid ""
"# keycloak.url is set by KeycloakTestResourceLifecycleManager\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.credentials=secret\n"
"quarkus.oidc.application-type=service\n"
msgstr ""
"# keycloak.url is set by KeycloakTestResourceLifecycleManager\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.credentials=secret\n"
"quarkus.oidc.application-type=service\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:893
#, no-wrap
msgid ""
"import static io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager.getAccessToken;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""
"import static io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager.getAccessToken;\n"
"import static org.hamcrest.Matchers.equalTo;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:896
#, no-wrap
msgid ""
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:901
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
"import io.restassured.RestAssured;\n"
msgstr ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
"import io.restassured.RestAssured;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:905
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class BearerTokenAuthorizationTest {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:915
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))))\n"
"            .when().get(\"/api/users/preferredUserName\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))))\n"
"            .when().get(\"/api/users/preferredUserName\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:917
#: upstream/_versions/main/guides/security-openid-connect.adoc:1006
#: upstream/_versions/main/guides/security-openid-connect.adoc:1078
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:920
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` は `alice` と `admin` ユーザーを登録します。ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、`keycloak.token.user-roles` システムプロパティーでカスタマイズできます。ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、`keycloak.token.admin-roles` システムプロパティーでカスタマイズできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:923
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-service-app` - set `keycloak.realm` and `keycloak.service.client` system properties to customize the values if needed."
msgstr "デフォルトでは、`KeycloakTestResourceLifecycleManager` は HTTPS を使用して Keycloak インスタンスを初期化しますが、`keycloak.use.https=false` で無効にできます。デフォルトのレルム名は `quarkus` で、クライアント ID `quarkus-service-app` は、必要に応じて値をカスタマイズするために `keycloak.realm` および `keycloak.service.client` システムプロパティーを設定します。"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect.adoc:925
#, no-wrap
msgid "Local Public Key"
msgstr "ローカル公開鍵"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:928
msgid "You can also use a local inlined public key for testing your `quarkus-oidc` `service` applications:"
msgstr "また、 `quarkus-oidc` `service` アプリケーションのテストに、ローカルのインライン公開鍵を使用することもできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:933
#, no-wrap
msgid ""
"quarkus.oidc.client-id=test\n"
"quarkus.oidc.public-key=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\n"
msgstr ""
"quarkus.oidc.client-id=test\n"
"quarkus.oidc.public-key=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:935
#, no-wrap
msgid "smallrye.jwt.sign.key.location=/privateKey.pem\n"
msgstr "smallrye.jwt.sign.key.location=/privateKey.pem\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:938
msgid "copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the `Wiremock` section above to generate JWT tokens. You can use your own test keys if preferred."
msgstr "`integration-tests/oidc-tenancy` から `main` のQuarkusリポジトリに `privateKey.pem` をコピーし、上記 `Wiremock` のセクションと同様のテストコードを使用してJWTトークンを生成します。必要であれば、独自のテストキーを使用することもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:940
msgid "This approach provides a more limited coverage compared to the Wiremock approach - for example, the remote communication code is not covered."
msgstr "このアプローチは、Wiremockのアプローチと比較して、より限定された範囲をカバーします。例えば、リモート通信コードはカバーされません。"

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect.adoc:942
#, no-wrap
msgid "TestSecurity annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:945
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations for testing the `service` application endpoint code which depends on the injected `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "`@TestSecurity` および `@OidcSecurity` アノテーションを使用して、注入された `JsonWebToken` ならびに `UserInfo` および `OidcConfigurationMetadata` に依存する `service` アプリケーションエンドポイントコードをテストできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:947
#, fuzzy
msgid "Add the following dependency:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:956
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-oidc</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-oidc</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:962
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-security-oidc\")\n"
msgstr "testImplementation(\"io.quarkus:quarkus-test-security-oidc\")\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:965
msgid "and write a test code like this one:"
msgstr "次のようなテストコードを作成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:979
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.Claim;\n"
"import io.quarkus.test.security.oidc.ConfigMetadata;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.test.security.oidc.UserInfo;\n"
"import io.restassured.RestAssured;\n"
msgstr ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.Claim;\n"
"import io.quarkus.test.security.oidc.ConfigMetadata;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.test.security.oidc.UserInfo;\n"
"import io.restassured.RestAssured;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:983
#: upstream/_versions/main/guides/security-openid-connect.adoc:1064
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(ProtectedResource.class)\n"
"public class TestSecurityAuthTest {\n"
msgstr ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(ProtectedResource.class)\n"
"public class TestSecurityAuthTest {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:990
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    public void testOidc() {\n"
"        RestAssured.when().get(\"test-security-oidc\").then()\n"
"                .body(is(\"userOidc:viewer\"));\n"
"    }\n"
msgstr ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    public void testOidc() {\n"
"        RestAssured.when().get(\"test-security-oidc\").then()\n"
"                .body(is(\"userOidc:viewer\"));\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1004
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(claims = {\n"
"            @Claim(key = \"email\", value = \"user@gmail.com\")\n"
"    }, userinfo = {\n"
"            @UserInfo(key = \"sub\", value = \"subject\")\n"
"    }, config = {\n"
"            @ConfigMetadata(key = \"issuer\", value = \"issuer\")\n"
"    })\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:user@gmail.com:subject:issuer\"));\n"
"    }\n"
msgstr ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(claims = {\n"
"            @Claim(key = \"email\", value = \"user@gmail.com\")\n"
"    }, userinfo = {\n"
"            @UserInfo(key = \"sub\", value = \"subject\")\n"
"    }, config = {\n"
"            @ConfigMetadata(key = \"issuer\", value = \"issuer\")\n"
"    })\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:user@gmail.com:subject:issuer\"));\n"
"    }\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1009
#: upstream/_versions/main/guides/security-openid-connect.adoc:1081
msgid "where `ProtectedResource` class may look like this:"
msgstr "ここで、`ProtectedResource` クラスは次のようになります。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1015
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.oidc.UserInfo;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.oidc.UserInfo;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1019
#: upstream/_versions/main/guides/security-openid-connect.adoc:1090
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1026
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
"    @Inject\n"
"    UserInfo userInfo;\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
"    @Inject\n"
"    UserInfo userInfo;\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1032
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc\")\n"
"    public String testSecurityOidc() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next();\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Path(\"test-security-oidc\")\n"
"    public String testSecurityOidc() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next();\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1042
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-claims-userinfo-metadata\")\n"
"    public String testSecurityOidcWithClaimsUserInfoMetadata() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next()\n"
"                + \":\" + accessToken.getClaim(\"email\")\n"
"                + \":\" + userInfo.getString(\"sub\")\n"
"                + \":\" + configMetadata.get(\"issuer\");\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"test-security-oidc-claims-userinfo-metadata\")\n"
"    public String testSecurityOidcWithClaimsUserInfoMetadata() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next()\n"
"                + \":\" + accessToken.getClaim(\"email\")\n"
"                + \":\" + userInfo.getString(\"sub\")\n"
"                + \":\" + configMetadata.get(\"issuer\");\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1047
msgid "Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.  `@OidcSecurity` annotation is optional and can be used to set the additional token claims, as well as `UserInfo` and `OidcConfigurationMetadata` properties.  Additionally, if `quarkus.oidc.token.issuer` property is configured then it will be used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr "`@TestSecurity` アノテーションは常に使用する必要があり、その `user` プロパティーは `JsonWebToken.getName()` として返され、`roles` プロパティーは `JsonWebToken.getGroups()` として返されることに注意してください。`@OidcSecurity` アノテーションはオプションであり、追加のトークンクレームおよび `UserInfo` プロパティーと `OidcConfigurationMetadata` プロパティーを設定するために使用できます。さらに、`quarkus.oidc.token.issuer` プロパティーが設定されている場合、`OidcConfigurationMetadata` `issuer` プロパティー値として使用されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1049
msgid "If you work with the opaque tokens then you can test them as follows:"
msgstr "不透明なトークンを使用する場合は、次のようにテストできます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1060
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.TokenIntrospection;\n"
"import io.restassured.RestAssured;\n"
msgstr ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.TokenIntrospection;\n"
"import io.restassured.RestAssured;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1076
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:userOidc:viewer\"));\n"
"    }\n"
msgstr ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:userOidc:viewer\"));\n"
"    }\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1086
#, no-wrap
msgid ""
"import io.quarkus.oidc.TokenIntrospection;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""
"import io.quarkus.oidc.TokenIntrospection;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1095
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
"    @Inject\n"
"    TokenIntrospection introspection;\n"
msgstr ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
"    @Inject\n"
"    TokenIntrospection introspection;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1105
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-opaque-token\")\n"
"    public String testSecurityOidcOpaqueToken() {\n"
"        return securityIdentity.getPrincipal().getName() + \":\" + securityIdentity.getRoles().iterator().next()\n"
"            + \":\" + introspection.getString(\"username\")\n"
"            + \":\" + introspection.getString(\"scope\")\n"
"            + \":\" + introspection.getString(\"email\");\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"test-security-oidc-opaque-token\")\n"
"    public String testSecurityOidcOpaqueToken() {\n"
"        return securityIdentity.getPrincipal().getName() + \":\" + securityIdentity.getRoles().iterator().next()\n"
"            + \":\" + introspection.getString(\"username\")\n"
"            + \":\" + introspection.getString(\"scope\")\n"
"            + \":\" + introspection.getString(\"email\");\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1108
msgid "Note that `@TestSecurity` `user` and `roles` attributes are available as `TokenIntrospection` `username` and `scope` properties and you can use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties such as an `email`, etc."
msgstr "`@TestSecurity` `user` および `roles` 属性は `TokenIntrospection` `username` および `scope` プロパティーとして使用可能で、`io.quarkus.test.security.oidc.TokenIntrospection` を使用してさらに `email` などのイントロスペクション応答プロパティーを追加できることに注意してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:1109
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1112
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "トークン検証エラーの詳細を確認するには、`io.quarkus.oidc.runtime.OidcProvider` `TRACE` レベルのログを有効にしてください。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1117
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1120
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "OidcProvider クライアント初期化エラーの詳細を確認するには、`io.quarkus.oidc.runtime.OidcRecorder` `TRACE` レベルのログを有効にしてください。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1125
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:1127
#, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1130
msgid "Note that the OpenID Connect Provider externally accessible token and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL. For example, if your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a Bearer token then an issuer verification failure may be reported by the endpoint."
msgstr "OpenID Connect プロバイダーの外部からアクセス可能なトークンおよび他のエンドポイントは、自動検出または設定された URL とは異なる HTTP(S) URL (`quarkus.oidc.auth-server-url` 内部 URL からの相対 URL) を持つことに注意してください。たとえば、SPA が外部トークンエンドポイントアドレスからトークンを取得し、それをベアラートークンとして Quarkus に送信すると、発行者の検証の失敗がエンドポイントによって報告される場合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1133
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "このような場合、Keycloak を使用する場合は、外部からアクセス可能なベース URL に設定された `KEYCLOAK_FRONTEND_URL` システムプロパティーで起動してください。他の Openid Connect プロバイダーと連携している場合は、プロバイダーのドキュメントを確認してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect.adoc:1134
#, no-wrap
msgid "How to use 'client-id' property"
msgstr "'client-id' プロパティーの使用方法"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1137
msgid "`quarkus.oidc.client-id` property identifies an OpenID Connect Client which requested the current bearer token. It can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr "`quarkus.oidc.client-id` プロパティーは、現在のベアラトークンを要求した OpenIDConnect クライアントを識別します。これは、ブラウザーで実行されている SPA アプリケーション、またはアクセストークンを Quarkus `service` アプリケーションに伝播する Quarkus `web-app` 機密クライアントアプリケーションの場合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1140
msgid "This property is required if the `service` application is expected to introspect the tokens remotely - which is always the case for the opaque tokens.  This property is optional if the local Json Web Key token verification only is used."
msgstr "このプロパティーは、`service` アプリケーションがトークンをリモートで検査することが期待される場合に必要です。これは不透明なトークンの場合は常に当てはまります。ローカルの Json Web Key トークン検証のみが使用される場合、このプロパティーはオプションです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1142
msgid "Nonetheless, setting this property is encouraged even if the endpoint does not require access to the remote introspection endpoint. The reasons behind it that `client-id`, if set, can be used to verify the token audience and will also be included in the logs when the token verification fails for the better traceability of the tokens issued to specific clients to be analyzed over a longer period of time."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1144
msgid "For example, if your OpenID Connect provider sets a token audience then the following configuration pattern is recommended:"
msgstr "たとえば、OpenID Connect プロバイダーがトークンオーディエンスを設定する場合、次の設定パターンが推奨されます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect.adoc:1151
#, no-wrap
msgid ""
"# Set client-id\n"
"quarkus.oidc.client-id=quarkus-app\n"
"# Token audience claim must contain 'quarkus-app'\n"
"quarkus.oidc.token.audience=${quarkus.oidc.client-id}\n"
msgstr ""
"# Set client-id\n"
"quarkus.oidc.client-id=quarkus-app\n"
"# Token audience claim must contain 'quarkus-app'\n"
"quarkus.oidc.token.audience=${quarkus.oidc.client-id}\n"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1154
msgid "If you set `quarkus.oidc.client-id` but your endpoint does not require remote access to one of OpenID Connect Provider endpoints (introspection, token acquisition, etc.) then do not set a client secret with the `quarkus.oidc.credentials` or similar properties as it will not be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1156
msgid "Note Quarkus `web-app` applications always require `quarkus.oidc.client-id` property."
msgstr "Quarkus の `web-app` アプリケーションには、常に `quarkus.oidc.client-id` プロパティーが必要である点に注意してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect.adoc:1157
#, no-wrap
msgid "References"
msgstr "リファレンス"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1160
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1161
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1162
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1163
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1164
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1165
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1166
msgid "xref:security.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr "xref:security.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1167
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect.adoc:1167
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr ""

#~ msgid "This command generates a Maven project, importing the `keycloak` extension which is an implementation of a Keycloak Adapter for Quarkus applications and provides all the necessary capabilities to integrate with a Keycloak Server and perform bearer token authorization."
#~ msgstr "このコマンドは、Quarkusアプリケーション用のKeycloakアダプターの実装であり、Keycloakサーバーと統合してベアラートークン認証を実行するために必要なすべての機能を提供する `keycloak` エクステンションをインポートして、Mavenプロジェクトを生成します。"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"

#~ msgid "Docker"
#~ msgstr "Docker"

#~ msgid "./mvnw package -Pnative\n"
#~ msgstr "./mvnw package -Pnative\n"

#~ msgid "Injection of the `JsonWebToken` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
#~ msgstr "`JsonWebToken` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#~ msgid "Configuring using the application.properties file"
#~ msgstr "application.propertiesファイルを使った設定"

#~ msgid "Running in Developer Mode"
#~ msgstr "デベロッパーモードでの実行"
