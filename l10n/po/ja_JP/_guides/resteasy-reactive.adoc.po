# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-09-11 01:11+0000\n"
"PO-Revision-Date: 2022-07-19 17:20+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/resteasy-reactive.adoc:6
#, no-wrap
msgid "Writing REST Services with RESTEasy Reactive"
msgstr "RESTEasy Reactive を使用した REST サービスの作成"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:20
msgid "This guide explains how to write REST Services with RESTEasy Reactive in Quarkus."
msgstr "このガイドでは、QuarkusでRESTEasy Reactiveを使用してRESTサービスを記述する方法を説明します。"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:25
msgid "This is the reference guide for RESTEasy Reactive.  For a more lightweight introduction, please refer to the xref:rest-json.adoc[Writing JSON REST services guides]."
msgstr "本書は、RESTEasy Reactiveのリファレンスガイドです。よりライトな紹介は、 link:rest-json.html[Writing JSON REST servicesのガイド] を参照してください。"

#. type: Title ==
#: upstream/_guides/resteasy-reactive.adoc:27
#, no-wrap
msgid "What is RESTEasy Reactive?"
msgstr "RESTEasy Reactiveとは？"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:33
msgid "RESTEasy Reactive is a new link:{jaxrsspec}[JAX-RS] implementation written from the ground up to work on our common https://vertx.io/[Vert.x] layer and is thus fully reactive, while also being very tightly integrated with Quarkus and consequently moving a lot of work to build time."
msgstr "RESTEasy Reactive は共通の https://vertx.io/[Vert.x] レイヤーで動作するように一から書かれた新しい link:{jaxrsspec}[JAX-RS] の実装であり、完全にリアクティブです。また、Quarkus と非常に緊密に統合されており、結果として多くの作業をビルド時に移動させます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:37
msgid "You should be able to use it in place of any JAX-RS implementation, but on top of that it has great performance for both blocking and non-blocking endpoints, and a lot of new features on top of what JAX-RS provides."
msgstr "JAX-RSの実装の代わりに使うことができるはずですが、それに加えて、ブロッキングエンドポイントとノンブロッキングエンドポイントの両方で優れたパフォーマンスを発揮し、JAX-RSが提供する機能に加えて多くの新機能を備えています。"

#. type: Title ==
#: upstream/_guides/resteasy-reactive.adoc:38
#, no-wrap
msgid "Writing endpoints"
msgstr "エンドポイントの作成"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:40
#, no-wrap
msgid "Getting started"
msgstr "はじめに"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:43
msgid "Add the following import to your build file:"
msgstr "次のインポートをビルドファイルに追加します:"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:45
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:51
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:54
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:57
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
msgstr "implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:60
msgid "You can now write your first endpoint in the `org.acme.rest.Endpoint` class:"
msgstr "これで、 `org.acme.rest.Endpoint` クラスで最初のエンドポイントを書くことができます:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:64
#: upstream/_guides/resteasy-reactive.adoc:104
#: upstream/_guides/resteasy-reactive.adoc:126
#: upstream/_guides/resteasy-reactive.adoc:178
#: upstream/_guides/resteasy-reactive.adoc:286
#: upstream/_guides/resteasy-reactive.adoc:350
#: upstream/_guides/resteasy-reactive.adoc:599
#: upstream/_guides/resteasy-reactive.adoc:642
#: upstream/_guides/resteasy-reactive.adoc:676
#: upstream/_guides/resteasy-reactive.adoc:712
#: upstream/_guides/resteasy-reactive.adoc:751
#: upstream/_guides/resteasy-reactive.adoc:859
#: upstream/_guides/resteasy-reactive.adoc:884
#: upstream/_guides/resteasy-reactive.adoc:912
#: upstream/_guides/resteasy-reactive.adoc:976
#: upstream/_guides/resteasy-reactive.adoc:1011
#: upstream/_guides/resteasy-reactive.adoc:1538
#: upstream/_guides/resteasy-reactive.adoc:1564
#: upstream/_guides/resteasy-reactive.adoc:1606
#: upstream/_guides/resteasy-reactive.adoc:1639
#: upstream/_guides/resteasy-reactive.adoc:1702
#: upstream/_guides/resteasy-reactive.adoc:1952
#: upstream/_guides/resteasy-reactive.adoc:1986
#: upstream/_guides/resteasy-reactive.adoc:2050
#: upstream/_guides/resteasy-reactive.adoc:2104
#: upstream/_guides/resteasy-reactive.adoc:2129
#: upstream/_guides/resteasy-reactive.adoc:2194
#: upstream/_guides/resteasy-reactive.adoc:2297
#: upstream/_guides/resteasy-reactive.adoc:2422
#, no-wrap
msgid "package org.acme.rest;\n"
msgstr "package org.acme.rest;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:67
#: upstream/_guides/resteasy-reactive.adoc:107
#: upstream/_guides/resteasy-reactive.adoc:353
#: upstream/_guides/resteasy-reactive.adoc:649
#: upstream/_guides/resteasy-reactive.adoc:679
#: upstream/_guides/resteasy-reactive.adoc:1014
#: upstream/_guides/resteasy-reactive.adoc:1541
#: upstream/_guides/resteasy-reactive.adoc:1569
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:70
#: upstream/_guides/resteasy-reactive.adoc:192
#: upstream/_guides/resteasy-reactive.adoc:614
#: upstream/_guides/resteasy-reactive.adoc:652
#, no-wrap
msgid ""
"@Path(\"\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:76
#, no-wrap
msgid ""
"    @GET\n"
"    public String hello() {\n"
"        return \"Hello, World!\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public String hello() {\n"
"        return \"Hello, World!\";\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:78
#, no-wrap
msgid "Terminology"
msgstr "用語解説"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:80
#, no-wrap
msgid "REST"
msgstr "REST"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:81
msgid "https://en.wikipedia.org/wiki/Representational_state_transfer[REpresentational State Transfer]"
msgstr "https://en.wikipedia.org/wiki/Representational_state_transfer[REpresentational State Transfer]"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:81
#, no-wrap
msgid "Endpoint"
msgstr "エンドポイント"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:82
msgid "Java method which is called to serve a REST call"
msgstr "REST 呼び出しを提供するために呼び出される Java メソッド"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:82
#, no-wrap
msgid "URL / URI (Uniform Resource Locator / Identifier)"
msgstr "URL / URI (Uniform Resource Locator / Identifier)"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:83
msgid "Used to identify the location of REST resources (https://tools.ietf.org/html/rfc7230#section-2.7[specification])"
msgstr "REST リソースの場所を特定するために使用されます (https://tools.ietf.org/html/rfc7230#section-2.7[仕様])"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:83
#, no-wrap
msgid "Resource"
msgstr "リソース"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:84
msgid "Represents your domain object. This is what your API serves and modifies. Also called an `entity` in JAX-RS."
msgstr "ドメインオブジェクトを表します。これは、API が提供および変更するものです。JAX-RS ではエンティティーとも呼ばれます。"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:84
#, no-wrap
msgid "Representation"
msgstr "表現"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:85
msgid "How your resource is represented on the wire, can vary depending on content types"
msgstr "通信上でのリソースの表現方法は、Content typeによって異なります。"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:85
#, no-wrap
msgid "Content type"
msgstr "Content type"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:86
msgid "Designates a particular representation (also called a media type), for example `text/plain` or `application/json`"
msgstr "text/plain や application/json などの特定の表現 (メディアタイプとも呼ばれます) を指定します"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:86
#, no-wrap
msgid "HTTP"
msgstr "HTTP"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:87
msgid "Underlying wire protocol for routing REST calls (see https://tools.ietf.org/html/rfc7230[HTTP specifications])"
msgstr "REST 呼び出しをルーティングするための基本的なワイヤープロトコル (https://tools.ietf.org/html/rfc7230[HTTP 仕様] を参照)"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:87
#, no-wrap
msgid "HTTP request"
msgstr "HTTP リクエスト"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:88
msgid "the request part of the HTTP call, consisting of an HTTP method, a target URI, headers and an optional message body"
msgstr "HTTP メソッド、ターゲット URI、ヘッダー、およびオプションのメッセージ本文で設定される HTTP 呼び出しのリクエスト部分"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:88
#, no-wrap
msgid "HTTP response"
msgstr "HTTP レスポンス"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:89
msgid "the response part of the HTTP call, consisting of an HTTP response status, headers and an optional message body"
msgstr "HTTP レスポンスステータス、ヘッダー、およびオプションのメッセージ本文で設定される HTTP 呼び出しのレスポンス部分"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:90
#, no-wrap
msgid "Declaring endpoints: URI mapping"
msgstr "エンドポイントの宣言:URI マッピング"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:94
msgid "Any class annotated with a link:{jaxrsapi}/javax/ws/rs/Path.html[`@Path`] annotation can have its methods exposed as REST endpoints, provided they have an HTTP method annotation (see below)."
msgstr "link:{jaxrsapi}/javax/ws/rs/Path.html[`@Path`] アノテーションを持つクラスは、HTTP メソッドアノテーション (下記参照) を持っていれば、そのメソッドを REST エンドポイントとして公開することができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:97
msgid "That link:{jaxrsapi}/javax/ws/rs/Path.html[`@Path`] annotation defines the URI prefix under which those methods will be exposed. It can be empty, or contain a prefix such as `rest` or `rest/V1`."
msgstr "{jaxrsapi}/javax/ws/rs/Path.html[`@Path`] アノテーションは、これらのメソッドが公開される URI の接頭辞を定義します。これは空であるか、あるいは `rest` や `rest/V1` のような接頭辞を含むことができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:100
msgid "Each exposed endpoint method can in turn have another link:{jaxrsapi}/javax/ws/rs/Path.html[`@Path`] annotation which adds to its containing class annotation. For example, this defines a `rest/hello` endpoint:"
msgstr "公開された各エンドポイントメソッドは、別の link:{jaxrsapi}/javax/ws/rs/Path.html[`@Path`] アノテーションを持つことができ、それを含むクラスアノテーションを追加されます。例えば、これは `rest/hello` というエンドポイントを定義しています:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:110
#, no-wrap
msgid ""
"@Path(\"rest\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:117
#, no-wrap
msgid ""
"    @Path(\"hello\")\n"
"    @GET\n"
"    public String hello() {\n"
"        return \"Hello, World!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:120
msgid "See <<uri-parameters,URI parameters>> for more information about URI mapping."
msgstr "URI マッピングの詳細は、<<uri-parameters,URI parameters>> を参照してください。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:122
msgid "You can set the root path for all rest endpoints using the `@ApplicationPath` annotation, as shown below."
msgstr "以下に示すように、`@ApplicationPath` アノテーションを使用して、すべての REST エンドポイントのルートパスを設定できます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:129
#, no-wrap
msgid ""
"import javax.ws.rs.ApplicationPath;\n"
"import javax.ws.rs.core.Application;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:132
#, no-wrap
msgid ""
"@ApplicationPath(\"/api\")\n"
"public static class MyApplication extends Application {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:134
#: upstream/_guides/resteasy-reactive.adoc:2040
#: upstream/_guides/resteasy-reactive.adoc:2221
#: upstream/_guides/resteasy-reactive.adoc:2236
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:139
#, fuzzy
msgid "This will cause all rest endpoints to be resolve relative to `/api`, so the endpoint above with `@Path(\"rest\")` would be accessible at `/api/rest/`. You can also set the `quarkus.resteasy-reactive.path` build time property to set the root path if you don't want to use an annotation."
msgstr "これにより、すべての rest エンドポイントは `/api` からの相対パスで解決されるようになり、上記の `@Path (\"rest\")` のエンドポイントには `/api/rest/` でアクセスすることができるようになります。また、アノテーションを使用したくない場合は、`quarkus.rest.path` ビルド時のプロパティーを設定して、ルートパスを設定することができます。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:140
#, no-wrap
msgid "Declaring endpoints: HTTP methods"
msgstr "エンドポイントの宣言: HTTP メソッド"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:144
msgid "Each endpoint method must be annotated with one of the following annotations, which defines which HTTP method will be mapped to the method:"
msgstr "各エンドポイントメソッドには、次のいずれかのアノテーションを付ける必要があります。これにより、どの HTTP メソッドがそのメソッドにマップされるかが定義されます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:145
#, no-wrap
msgid "Table HTTP method annotations"
msgstr "テーブル HTTP メソッドのアノテーション"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:147
#: upstream/_guides/resteasy-reactive.adoc:237
#, no-wrap
msgid "Annotation"
msgstr "アノテーション"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:149
#: upstream/_guides/resteasy-reactive.adoc:239
#: upstream/_guides/resteasy-reactive.adoc:385
#: upstream/_guides/resteasy-reactive.adoc:569
#: upstream/_guides/resteasy-reactive.adoc:810
#: upstream/_guides/resteasy-reactive.adoc:947
#: upstream/_guides/resteasy-reactive.adoc:1153
#: upstream/_guides/resteasy-reactive.adoc:1259
#: upstream/_guides/resteasy-reactive.adoc:1352
#: upstream/_guides/resteasy-reactive.adoc:1722
#: upstream/_guides/resteasy-reactive.adoc:1739
#: upstream/_guides/resteasy-reactive.adoc:1839
#: upstream/_guides/resteasy-reactive.adoc:1859
#, no-wrap
msgid "Usage"
msgstr "使用方法"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:150
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/GET.html[`@GET`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/GET.html[`@GET`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:152
#, no-wrap
msgid "Obtain a resource representation, should not modify state, link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.1[HTTP docs])"
msgstr "リソース表現を取得します。状態を変更しないでください。link:{httpspec}#section-4.2.2[冪等] (link:{httpspec}#section-4.3.1[HTTP docs])"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:153
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/HEAD.html[`@HEAD`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/HEAD.html[`@HEAD`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:155
#, no-wrap
msgid "Obtain metadata about a resource, similar to `GET` with no body (link:{httpspec}#section-4.3.2[HTTP docs])"
msgstr "本文のない `GET` と同様に、リソースに関するメタデータを取得します (link:{httpspec}#section-4.3.2[HTTP docs])"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:156
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/POST.html[`@POST`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/POST.html[`@POST`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:158
#, no-wrap
msgid "Create a resource and obtain a link to it (link:{httpspec}#section-4.3.3[HTTP docs])"
msgstr "リソースを作成し、そのリソースへのリンクを取得します (link:{httpspec}#section-4.3.3[HTTP docs])"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:159
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/PUT.html[`@PUT`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/PUT.html[`@PUT`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:161
#, no-wrap
msgid "Replace a resource or create one, should be link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.4[HTTP docs])"
msgstr "リソースを置き換えるか作成します。link:{httpspec}#section-4.2.2[冪等] (link:{httpspec}#section-4.3.4[HTTP docs]) であるべきです。"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:162
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/DELETE.html[`@DELETE`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/DELETE.html[`@DELETE`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:164
#, no-wrap
msgid "Delete an existing resource, link:{httpspec}#section-4.2.2[idempotent]  (link:{httpspec}#section-4.3.5[HTTP docs])"
msgstr "既存のリソースを削除します。link:{httpspec}#section-4.2.2[冪等]  (link:{httpspec}#section-4.3.5[HTTP docs])"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:165
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/OPTIONS.html[`@OPTIONS`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/OPTIONS.html[`@OPTIONS`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:167
#, no-wrap
msgid "Obtain information about a resource, link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.7[HTTP docs])"
msgstr "リソースに関する情報を取得します。link:{httpspec}#section-4.2.2[冪等] (link:{httpspec}#section-4.3.7[HTTP docs]) です。"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:168
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/PATCH.html[`@PATCH`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/PATCH.html[`@PATCH`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:170
#, no-wrap
msgid "Update a resource, or create one, not link:{httpspec}#section-4.2.2[idempotent] (https://tools.ietf.org/html/rfc5789#section-2[HTTP docs])"
msgstr "リソースを更新するか、作成します。link:{httpspec}#section-4.2.2[冪等] (https://tools.ietf.org/html/rfc5789#section-2[HTTP docs]) ではありません。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:174
msgid "You can also declare other HTTP methods by declaring them as an annotation with the link:{jaxrsapi}/javax/ws/rs/HttpMethod.html[`@HttpMethod`] annotation:"
msgstr "link:{jaxrsapi}/javax/ws/rs/HttpMethod.html[`@HttpMethod`] アノテーションを付与したアノテーションを宣言することにより、他の HTTP メソッドを宣言することもできます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:181
#, no-wrap
msgid ""
"import java.lang.annotation.Retention;\n"
"import java.lang.annotation.RetentionPolicy;\n"
msgstr ""
"import java.lang.annotation.Retention;\n"
"import java.lang.annotation.RetentionPolicy;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:184
#, no-wrap
msgid ""
"import javax.ws.rs.HttpMethod;\n"
"import javax.ws.rs.Path;\n"
msgstr ""
"import javax.ws.rs.HttpMethod;\n"
"import javax.ws.rs.Path;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:189
#, no-wrap
msgid ""
"@Retention(RetentionPolicy.RUNTIME)\n"
"@HttpMethod(\"CHEESE\")\n"
"@interface CHEESE {\n"
"}\n"
msgstr ""
"@Retention(RetentionPolicy.RUNTIME)\n"
"@HttpMethod(\"CHEESE\")\n"
"@interface CHEESE {\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:198
#, no-wrap
msgid ""
"    @CHEESE\n"
"    public String hello() {\n"
"        return \"Hello, Cheese World!\";\n"
"    }\n"
"}\n"
msgstr ""
"    @CHEESE\n"
"    public String hello() {\n"
"        return \"Hello, Cheese World!\";\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:200
#, no-wrap
msgid "Declaring endpoints: representation / content types"
msgstr "エンドポイントの宣言: 表現/コンテンツタイプ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:205
msgid "Each endpoint method may consume or produce specific resource representations, which are indicated by the HTTP link:{httpspec}#section-3.1.1.5[`Content-Type`] header, which in turn contains link:{httpspec}#section-3.1.1.1[MIME (Media Type)] values, such as the following:"
msgstr "各エンドポイントメソッドは、特定のリソース表現を消費したり生成したりすることがあり、それは HTTP link:{httpspec}#section-3.1.1.5[`Content-Type`] header で示され、その中に次のような link:{httpspec}#section-3.1.1.1[MIME (Media Type)] 値が含まれています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:207
msgid "`text/plain` which is the default for any endpoint returning a `String`."
msgstr "`String` を返すエンドポイントのデフォルトである `text/plain`。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:208
msgid "`text/html` for HTML (such as with xref:qute.adoc[Qute templating])"
msgstr "HTML の `text/html` (such as with xref:qute.adoc[Qute templating])"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:209
msgid "`application/json` for a <<json,JSON REST endpoint>>"
msgstr "<<json,JSON REST endpoint>> の `application/json`"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:210
msgid "`text/*` which is a sub-type wildcard for any text media type"
msgstr "任意のテキストメディアタイプのサブタイプワイルドカードである `text/*`"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:211
msgid "`\\*/*` which is a wildcard for any media type"
msgstr "`\\*/*` は、あらゆるメディアタイプのワイルドカードです"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:216
msgid "You may annotate your endpoint class with the link:{jaxrsapi}/javax/ws/rs/Produces.html[`@Produces`] or link:{jaxrsapi}/javax/ws/rs/Consumes.html[`@Consumes`] annotations, which allow you to specify one or more media types that your endpoint may accept as HTTP request body or produce as HTTP response body. Those class annotations apply to each method."
msgstr "link:{jaxrsapi}/javax/ws/rs/Produces.html[`@Produces`] または link:{jaxrsapi}/javax/ws/rs/Consumes.html[`@Consumes`] アノテーションで、エンドポイントクラスをアノテーションできます。この場合、エンドポイントが HTTP リクエストボディとして受け入れ、HTTP レスポンスボディとして生成できるメディアタイプを一つまたは複数指定することが可能です。これらのクラスアノテーションは、各メソッドに適用されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:220
msgid "Any method may also be annotated with the link:{jaxrsapi}/javax/ws/rs/Produces.html[`@Produces`] or link:{jaxrsapi}/javax/ws/rs/Consumes.html[`@Consumes`] annotations, in which case they override any eventual class annotation."
msgstr "どのメソッドも link:{jaxrsapi}/javax/ws/rs/Produces.html[`@Produces`] または link:{jaxrsapi}/javax/ws/rs/Consumes.html[`@Consumes`] アノテーションを付けることができ、その場合は最終的にどのクラスアノテーションもオーバーライドされることになります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:223
msgid "The link:{jaxrsapi}/javax/ws/rs/core/MediaType.html[`MediaType`] class has many constants you can use to point to specific pre-defined media types."
msgstr "link:{jaxrsapi}/javax/ws/rs/core/MediaType.html[`MediaType`] クラスには、特定の事前定義されたメディアタイプを指すために使用できる多くの定数があります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:225
msgid "See <<negotiation>> for more information."
msgstr "詳細は、<<negotiation>> を参照してください。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:226
#, no-wrap
msgid "Accessing request parameters"
msgstr "リクエストパラメーターへのアクセス"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:232
msgid "don't forget to configure your compiler to generate parameter name information with `-parameters` (javac)  or `<parameters>` or `<maven.compiler.parameters>` (https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#parameters[Maven])."
msgstr "パラメーター名の情報を生成するために、`-parameters` (javac) または `<parameters>` または `<maven.compiler.parameters>` (https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#parameters[Maven]) を使ってコンパイラーを設定することを忘れないでください。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:234
msgid "The following HTTP request elements may be obtained by your endpoint method:"
msgstr "次の HTTP リクエスト要素は、エンドポイントメソッドによって取得される可能性があります。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:235
#, no-wrap
msgid "Table HTTP request parameter annotations"
msgstr "テーブル HTTP リクエストパラメーターアノテーション"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:237
#, no-wrap
msgid "HTTP element"
msgstr "HTTP 要素"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:240
#, no-wrap
msgid "[[path-parameter]]Path parameter"
msgstr "[[path-parameter]]Path パラメーター"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:241
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] (or nothing)"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] (または、なにもない)"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:244
#, fuzzy, no-wrap
msgid ""
"URI template parameter (simplified version of the https://tools.ietf.org/html/rfc6570[URI Template specification]),\n"
"see <<uri-parameters,URI parameters>> for more information."
msgstr ""
"URI テンプレートパラメーター (https://tools.ietf.org/html/rfc6570[URI Template specification] の簡易バージョン)。\n"
"詳細は、<<uri-parameters,URI parameters>> を参照してください。"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:245
#, no-wrap
msgid "Query parameter"
msgstr "クエリーパラメーター"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:246
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestQuery.html[`@RestQuery`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestQuery.html[`@RestQuery`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:248
#, fuzzy, no-wrap
msgid "The value of a https://tools.ietf.org/html/rfc3986#section-3.4[URI query parameter]"
msgstr "https://tools.ietf.org/html/rfc3986#section-3.4[URI query parameter] の値"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:249
#, no-wrap
msgid "Header"
msgstr "ヘッダ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:250
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestHeader.html[`@RestHeader`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestHeader.html[`@RestHeader`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:252
#, no-wrap
msgid "The value of an https://tools.ietf.org/html/rfc7230#section-3.2[HTTP header]"
msgstr "https://tools.ietf.org/html/rfc7230#section-3.2[HTTP header] の値"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:253
#, no-wrap
msgid "Cookie"
msgstr "Cookie"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:254
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestCookie.html[`@RestCookie`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestCookie.html[`@RestCookie`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:256
#, no-wrap
msgid "The value of an https://tools.ietf.org/html/rfc6265#section-4.2[HTTP cookie]"
msgstr "https://tools.ietf.org/html/rfc6265#section-4.2[HTTP cookie] の値"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:257
#, no-wrap
msgid "Form parameter"
msgstr "フォームパラメーター"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:258
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:260
#, no-wrap
msgid "The value of an https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST[HTTP URL-encoded FORM]"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST[HTTP URL-encoded FORM] の値"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:261
#, no-wrap
msgid "Matrix parameter"
msgstr "マトリックスパラメーター"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:262
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestMatrix.html[`@RestMatrix`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestMatrix.html[`@RestMatrix`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:264
#, no-wrap
msgid "The value of an https://tools.ietf.org/html/rfc3986#section-3.3[URI path segment parameter]"
msgstr "https://tools.ietf.org/html/rfc3986#section-3.3[URI path segment parameter] の値"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:268
msgid "For each of those annotations, you may specify the name of the element they refer to, otherwise they will use the name of the annotated method parameter."
msgstr "これらのアノテーションごとに、参照する要素の名前を指定できます。指定しない場合は、アノテーションが付けられたメソッドパラメーターの名前が使用されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:270
msgid "If a client made the following HTTP call:"
msgstr "クライアントが次の HTTP 呼び出しを行った場合:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:277
#, no-wrap
msgid ""
"POST /cheeses;variant=goat/tomme?age=matured HTTP/1.1\n"
"Content-Type: application/x-www-form-urlencoded\n"
"Cookie: level=hardcore\n"
"X-Cheese-Secret-Handshake: fist-bump\n"
msgstr ""
"POST /cheeses;variant=goat/tomme?age=matured HTTP/1.1\n"
"Content-Type: application/x-www-form-urlencoded\n"
"Cookie: level=hardcore\n"
"X-Cheese-Secret-Handshake: fist-bump\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:279
#, no-wrap
msgid "smell=strong\n"
msgstr "smell=strong\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:282
msgid "Then you could obtain all the various parameters with this endpoint method:"
msgstr "次に、このエンドポイントメソッドを使用してさまざまなパラメーターをすべて取得できます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:289
#, no-wrap
msgid ""
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:296
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.RestCookie;\n"
"import org.jboss.resteasy.reactive.RestForm;\n"
"import org.jboss.resteasy.reactive.RestHeader;\n"
"import org.jboss.resteasy.reactive.RestMatrix;\n"
"import org.jboss.resteasy.reactive.RestPath;\n"
"import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""
"import org.jboss.resteasy.reactive.RestCookie;\n"
"import org.jboss.resteasy.reactive.RestForm;\n"
"import org.jboss.resteasy.reactive.RestHeader;\n"
"import org.jboss.resteasy.reactive.RestMatrix;\n"
"import org.jboss.resteasy.reactive.RestPath;\n"
"import org.jboss.resteasy.reactive.RestQuery;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:299
#, no-wrap
msgid ""
"@Path(\"/cheeses/{type}\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"/cheeses/{type}\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:311
#, no-wrap
msgid ""
"    @POST\n"
"    public String allParams(@RestPath String type,\n"
"                            @RestMatrix String variant,\n"
"                            @RestQuery String age,\n"
"                            @RestCookie String level,\n"
"                            @RestHeader(\"X-Cheese-Secret-Handshake\")\n"
"                            String secretHandshake,\n"
"                            @RestForm String smell) {\n"
"        return type + \"/\" + variant + \"/\" + age + \"/\" + level + \"/\" + secretHandshake + \"/\" + smell;\n"
"    }\n"
"}\n"
msgstr ""
"    @POST\n"
"    public String allParams(@RestPath String type,\n"
"                            @RestMatrix String variant,\n"
"                            @RestQuery String age,\n"
"                            @RestCookie String level,\n"
"                            @RestHeader(\"X-Cheese-Secret-Handshake\")\n"
"                            String secretHandshake,\n"
"                            @RestForm String smell) {\n"
"        return type + \"/\" + variant + \"/\" + age + \"/\" + level + \"/\" + secretHandshake + \"/\" + smell;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:316
msgid "the link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] annotation is optional: any parameter whose name matches an existing URI template variable will be automatically assumed to have link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`]."
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] アノテーションはオプションです。名前が既存の URI テンプレート変数に一致する任意のパラメーターは、自動的に link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] を持っていると想定されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:324
msgid "You can also use any of the JAX-RS annotations link:{jaxrsapi}/javax/ws/rs/PathParam.html[`@PathParam`], link:{jaxrsapi}/javax/ws/rs/QueryParam.html[`@QueryParam`], link:{jaxrsapi}/javax/ws/rs/HeaderParam.html[`@HeaderParam`], link:{jaxrsapi}/javax/ws/rs/CookieParam.html[`@CookieParam`], link:{jaxrsapi}/javax/ws/rs/FormParam.html[`@FormParam`] or link:{jaxrsapi}/javax/ws/rs/MatrixParam.html[`@MatrixParam`] for this, but they require you to specify the parameter name."
msgstr "JAX-RS のアノテーションも使用できます。link:{jaxrsapi}/javax/ws/rs/PathParam.html[`@PathParam`]、link:{jaxrsapi}/javax/ws/rs/QueryParam.html[`@QueryParam`]、link:{jaxrsapi}/javax/ws/rs/HeaderParam.html[`@HeaderParam`]、link:{jaxrsapi}/javax/ws/rs/CookieParam.html[`@CookieParam`]、link:{jaxrsapi}/javax/ws/rs/FormParam.html[`@FormParam`] または link:{jaxrsapi}/javax/ws/rs/MatrixParam.html[`@MatrixParam`]。しかし、パラメーター名の指定が必要です。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:326
msgid "See <<parameter-mapping>> for more advanced use-cases."
msgstr "より詳細なユースケースは、 <<parameter-mapping>> を参照してください。"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:332
msgid "When an exception occurs in RESTEasy Reactive request parameter handling code, the exception is not printed by default to the log (for security reasons).  This can sometimes make it hard to understand why certain HTTP status codes are returned (as the JAX-RS mandates the use of non-intuitive error codes in various cases).  In such cases, users are encouraged to set the logging level for the `org.jboss.resteasy.reactive.server.handlers.ParameterHandler` category to `DEBUG` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:336
#, no-wrap
msgid "quarkus.log.category.\"org.jboss.resteasy.reactive.server.handlers.ParameterHandler\".level=DEBUG\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:339
#, no-wrap
msgid "Declaring URI parameters"
msgstr "URI パラメーターの宣言"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:346
msgid "You can declare URI parameters and use regular expressions in your path, so for instance the following endpoint will serve requests for `/hello/stef/23` and `/hello` but not `/hello/stef/0x23`:"
msgstr "URI パラメーターを宣言し、パスで正規表現を使用できるため、たとえば、次のエンドポイントは `/hello/stef/23` と `/hello` のリクエストを処理しますが、`/hello/stef/0x23` は処理しません。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:356
#: upstream/_guides/resteasy-reactive.adoc:2266
#, no-wrap
msgid ""
"@Path(\"hello\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"hello\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:362
#, no-wrap
msgid ""
"    @Path(\"{name}/{age:\\\\d+}\")\n"
"    @GET\n"
"    public String personalisedHello(String name, int age) {\n"
"        return \"Hello \" + name + \" is your age really \" + age + \"?\";\n"
"    }\n"
msgstr ""
"    @Path(\"{name}/{age:\\\\d+}\")\n"
"    @GET\n"
"    public String personalisedHello(String name, int age) {\n"
"        return \"Hello \" + name + \" is your age really \" + age + \"?\";\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:368
#, no-wrap
msgid ""
"    @GET\n"
"    public String genericHello() {\n"
"        return \"Hello stranger\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public String genericHello() {\n"
"        return \"Hello stranger\";\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:371
#, no-wrap
msgid "Accessing the request body"
msgstr "リクエスト本文へのアクセス"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:376
msgid "Any method parameter with no annotation will receive the method body.footnote:[Unless it is a <<path-parameter,URI template parameter>> or a <<context-objects,context object>>.], after it has been mapped from its HTTP representation to the Java type of the parameter."
msgstr "アノテーションのないメソッドパラメーターは、HTTP 表現からパラメーターの Java タイプにマッピングされた後、それが <<path-parameter,URI template parameter>> または <<context-objects,context object>> でない限り、メソッド本文の脚注を受け取ります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:378
msgid "The following parameter types will be supported out of the box:"
msgstr "次のパラメータータイプは、そのままでサポートされます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:381
#, no-wrap
msgid "Table Request body parameter type"
msgstr "テーブルリクエスト本文のパラメータータイプ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:383
#: upstream/_guides/resteasy-reactive.adoc:567
#: upstream/_guides/resteasy-reactive.adoc:808
#: upstream/_guides/resteasy-reactive.adoc:1720
#: upstream/_guides/resteasy-reactive.adoc:1737
#: upstream/_guides/resteasy-reactive.adoc:1837
#: upstream/_guides/resteasy-reactive.adoc:1857
#, no-wrap
msgid "Typ"
msgstr "タイプ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:386
#, no-wrap
msgid "link:{jdkapi}/java/io/File.html[`File`]"
msgstr "link:{jdkapi}/java/io/File.html[`File`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:388
#, no-wrap
msgid "The entire request body in a temporary file"
msgstr "一時ファイル内のリクエスト本文全体"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:389
#, no-wrap
msgid "`byte[]`"
msgstr "`byte[]`"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:391
#, no-wrap
msgid "The entire request body, not decoded"
msgstr "デコードされていないリクエスト本文全体"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:392
#, no-wrap
msgid "`char[]`"
msgstr "`char[]`"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:394
#: upstream/_guides/resteasy-reactive.adoc:397
#, no-wrap
msgid "The entire request body, decoded"
msgstr "デコードされたリクエスト本文全体"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:395
#, no-wrap
msgid "link:{jdkapi}/java/lang/String.html[`String`]"
msgstr "link:{jdkapi}/java/lang/String.html[`String`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:398
#, no-wrap
msgid "link:{jdkapi}/java/io/InputStream.html[`InputStream`]"
msgstr "link:{jdkapi}/java/io/InputStream.html[`InputStream`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:400
#: upstream/_guides/resteasy-reactive.adoc:403
#, no-wrap
msgid "The request body in a blocking stream"
msgstr "ブロッキングストリームのリクエスト本文"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:401
#, no-wrap
msgid "link:{jdkapi}/java/io/Reader.html[`Reader`]"
msgstr "link:{jdkapi}/java/io/Reader.html[`Reader`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:404
#, no-wrap
msgid "All Java primitives and their wrapper classes"
msgstr "すべての Java プリミティブとそのラッパークラス"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:406
#, no-wrap
msgid "Java primitive types"
msgstr "Java プリミティブタイプ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:407
#, no-wrap
msgid "link:{jdkapi}/java/math/BigDecimal.html[`BigDecimal`], link:{jdkapi}/java/math/BigInteger.html[`BigInteger`]"
msgstr "link:{jdkapi}/java/math/BigDecimal.html[`BigDecimal`]、link:{jdkapi}/java/math/BigInteger.html[`BigInteger`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:409
#, no-wrap
msgid "Large integers and decimals."
msgstr "大きな整数と小数。"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:411
#, fuzzy, no-wrap
msgid ""
"link:{jsonpapi}/javax/json/JsonArray.html[`JsonArray`], link:{jsonpapi}/javax/json/JsonObject.html[`JsonObject`],\n"
"link:{jsonpapi}/javax/json/JsonStructure.html[`JsonStructure`], link:{jsonpapi}/javax/json/JsonValue.html[`JsonValue`]"
msgstr ""
"link:{jsonpapi}/javax/json/JsonArray.html[`JsonArray`]、link:{jsonpapi}/javax/json/JsonArray.html[`JsonObject`]、\n"
"link:{jsonpapi}/javax/json/JsonArray.html[`JsonStructure`]、link:{jsonpapi}/javax/json/JsonArray.html[`JsonValue`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:413
#, no-wrap
msgid "JSON value types"
msgstr "JSON 値のタイプ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:414
#, no-wrap
msgid "link:{vertxapi}io/vertx/core/buffer/Buffer.html[`Buffer`]"
msgstr "link:{vertxapi}io/vertx/core/buffer/Buffer.html[`Buffer`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:416
#, no-wrap
msgid "Vert.x Buffer"
msgstr "Vert.x Buffer"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:417
#, no-wrap
msgid "any other type"
msgstr "その他のタイプ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:419
#, no-wrap
msgid "Will be <<json,mapped from JSON to that type>>"
msgstr "<<json,mapped from JSON to that type>> になります"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:422
msgid "You can add support for more <<readers-writers,body parameter types>>."
msgstr "さらに<<readers-writers,body parameter types>> のサポートを追加することができます。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:424
#, no-wrap
msgid "Handling Multipart Form data"
msgstr "マルチパートフォームデータの処理"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:429
msgid "To handle HTTP requests that have `multipart/form-data` as their content type, RESTEasy Reactive introduces the link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/MultipartForm.html[`@MultipartForm`] annotation.  Let us look at an example of its use."
msgstr "RESTEasy Reactive は、コンテンツタイプとして `multipart/form-data` を持つ HTTP リクエストを処理するために、 link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/MultipartForm.html[`@MultipartForm`] アノテーションを導入しています。その使用例を見てみましょう。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:432
msgid "Assuming an HTTP request containing a file upload and a form value containing a string description need to be handled, we could write a POJO that will hold this information like so:"
msgstr "ファイルのアップロードを含む HTTP リクエストと、文字列の説明を含むフォーム値を処理する必要があると仮定すると、次のようにこの情報を保持する POJO を記述できます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:436
#: upstream/_guides/resteasy-reactive.adoc:510
#, no-wrap
msgid "import javax.ws.rs.core.MediaType;\n"
msgstr "import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:440
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.PartType;\n"
"import org.jboss.resteasy.reactive.RestForm;\n"
"import org.jboss.resteasy.reactive.multipart.FileUpload;\n"
msgstr ""
"import org.jboss.resteasy.reactive.PartType;\n"
"import org.jboss.resteasy.reactive.RestForm;\n"
"import org.jboss.resteasy.reactive.multipart.FileUpload;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:442
#, no-wrap
msgid "public class FormData {\n"
msgstr "public class FormData {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:446
#, no-wrap
msgid ""
"    @RestForm\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String description;\n"
msgstr ""
"    @RestForm\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String description;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:450
#, no-wrap
msgid ""
"    @RestForm(\"image\")\n"
"    public FileUpload file;\n"
"}\n"
msgstr ""
"    @RestForm(\"image\")\n"
"    public FileUpload file;\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:455
msgid "The `name` field will contain the data contained in the part of HTTP request called `description` (because link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] does not define a value, the field name is used), while the `file` field will contain data about the uploaded file in the `image` part of HTTP request."
msgstr "`name` フィールドには、HTTP リクエストの `description` という部分に含まれるデータが入ります (link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] は値を定義しないため、フィールド名が使用されます)。一方 `file` フィールドには、HTTP リクエストの `image` 部分にアップロードしたファイルに関するデータが格納されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:458
#, fuzzy
msgid "The size of every part in a multipart request must conform to the value of `quarkus.http.limits.max-form-attribute-size`, for which the default is 2048 bytes.  Any request with a part size exceeding this configuration will result in HTTP status code 413."
msgstr "マルチパートリクエストの各パートのサイズは、 `quarkus.http.limits.max-form-attribute-size` の値に準拠する必要があり、そのデフォルトは2048バイトです。この設定を超えるパートサイズのリクエストは、HTTPステータスコード413にな ります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:461
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/multipart/FileUpload.html[`FileUpload`] provides access to various metadata of the uploaded file. If however all you need is a handle to the uploaded file, `java.nio.file.Path` or `java.io.File` could be used."
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/multipart/FileUpload.html[`FileUpload`] はアップロードされたファイルの様々なメタデータにアクセスすることができます。しかし、アップロードされたファイルへの処理が必要なだけなら、`java.nio.file.Path` や `java.io.File` を使用することができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:463
msgid "When access to all uploaded files without specifying the form names is needed, RESTEasy Reactive allows the use of `@RestForm List<FileUpload>`, where it is important to **not** set a name for the link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] annotation."
msgstr "フォーム名を指定せずにアップロードされたすべてのファイルにアクセスする必要がある場合、RESTEasy Reactive では `@RestForm List<FileUpload>` を使用できます。ここで、link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] アノテーションにnameを設定することは重要では**ありません**。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:467
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PartType.html[`@PartType`] is used to aid in deserialization of the corresponding part of the request into the desired Java type. It is very useful when for example the corresponding body part is JSON and needs to be converted to a POJO."
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PartType.html[`@PartType`] は、リクエストの対応する部分を希望の Java タイプにデシリアライズする際に使用されます。たとえば、対応する本文部分が JSON であり、POJO に変換する必要がある場合に非常に便利です。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:469
msgid "This POJO could be used in a Resource method like so:"
msgstr "この POJO は、次のような Resource メソッドで使用できます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:477
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:479
#, no-wrap
msgid "import org.jboss.resteasy.reactive.MultipartForm;\n"
msgstr "import org.jboss.resteasy.reactive.MultipartForm;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:482
#: upstream/_guides/resteasy-reactive.adoc:536
#, no-wrap
msgid ""
"@Path(\"multipart\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"multipart\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:491
#, no-wrap
msgid ""
"    @POST\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    @Path(\"form\")\n"
"    public String form(@MultipartForm FormData formData) {\n"
"        // return something\n"
"    }\n"
"}\n"
msgstr ""
"    @POST\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    @Path(\"form\")\n"
"    public String form(@MultipartForm FormData formData) {\n"
"        // return something\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:495
msgid "The use of link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/MultipartForm.html[`@MultipartForm`] as method parameter makes RESTEasy Reactive handle the request as a multipart form request."
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/MultipartForm.html[`@MultipartForm`] をメソッドパラメーターとして使用すると、RESTEasy Reactive はマルチパートフォームリクエストとして処理することができるようになります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:497
msgid "The use of `@MultipartForm` is actually unnecessary as RESTEasy Reactive can infer this information from the use of `@Consumes(MediaType.MULTIPART_FORM_DATA)`"
msgstr "RESTEasy Reactive は `@Consumes(MediaType.MULTIPART_FORM_DATA)` の使用からこの情報を推測できるので、`@MultipartForm` の使用は実際には不要です。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:503
#, fuzzy
msgid "When handling file uploads, it is very important to move the file to permanent storage (like a database, a dedicated file system or a cloud storage) in your code that handles the POJO.  Otherwise, the file will no longer be accessible when the request terminates.  Moreover, if `quarkus.http.body.delete-uploaded-files-on-end` is set to true, Quarkus will delete the uploaded file when the HTTP response is sent. If the setting is disabled, the file will reside on the file system of the server (in the directory defined by the `quarkus.http.body.uploads-directory` configuration option), but as the uploaded files are saved with a UUID file name and no additional metadata is saved, these files are essentially a random dump of files."
msgstr "ファイルのアップロードを処理する場合、POJO を処理するコード内でファイルを永続的なストレージ (データベース、専用ファイルシステム、クラウドストレージなど) に移動させることが非常に重要です。そうしないと、リクエストが終了したときに、ファイルにアクセスできなくなります。さらに、`quarkus.http.body.delete-uploaded-files-on-end` を true に設定すると、HTTP レスポンスの送信時に、アップロードされたファイルが削除されます。この設定を無効にすると、ファイルはサーバーのファイルシステム上 (`quarkus.http.body.uploads-directory` 設定オプションで定義したディレクトリー) に存在しますが、アップロードされたファイルは UUID ファイル名で保存されて追加のメタデータが保存されないため、これらのファイルは本質的にファイルのランダムダンプとなります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:506
msgid "Similarly, RESTEasy Reactive can produce Multipart Form data to allow users download files from the server. For example, we could write a POJO that will hold the information we want to expose as:"
msgstr "同様に、RESTEasy Reactive は、ユーザーがサーバーからファイルをダウンロードできるようにするための Multipart Form データを生成することができます。例えば、公開したい情報を保持する POJO を、次のように書くことができます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:513
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.PartType;\n"
"import org.jboss.resteasy.reactive.RestForm;\n"
msgstr ""
"import org.jboss.resteasy.reactive.PartType;\n"
"import org.jboss.resteasy.reactive.RestForm;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:515
#, no-wrap
msgid "public class DownloadFormData {\n"
msgstr "public class DownloadFormData {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:518
#, no-wrap
msgid ""
"    @RestForm\n"
"    String name;\n"
msgstr ""
"    @RestForm\n"
"    String name;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:523
#, no-wrap
msgid ""
"    @RestForm\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    File file;\n"
"}\n"
msgstr ""
"    @RestForm\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    File file;\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:526
msgid "And then expose this POJO via a Resource like so:"
msgstr "そして、次のようなリソースを介してこの POJO を公開します。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:533
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:544
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.MULTIPART_FORM_DATA)\n"
"    @Path(\"file\")\n"
"    public DownloadFormData getFile() {\n"
"        // return something\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.MULTIPART_FORM_DATA)\n"
"    @Path(\"file\")\n"
"    public DownloadFormData getFile() {\n"
"        // return something\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:547
msgid "For the time being, returning Multipart data is limited to be blocking endpoints."
msgstr "当面、マルチパートデータを返すことはエンドポイントをブロックすることに限定されます。"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:548
#, fuzzy, no-wrap
msgid "Handling malformed input"
msgstr "不正な入力への対応"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:553
#, fuzzy
msgid "As part of reading the multipart body, RESTEasy Reactive invokes the proper MessageBodyReaderlink:{jaxrsapi}/javax/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`] for each part of the request.  If an `IOException` occurs for one of these parts (for example if Jackson was unable to deserialize a JSON part), then a `org.jboss.resteasy.reactive.server.multipart.MultipartPartReadingException` is thrown.  If this exception is not handled by the application as mentioned in <<exception-mapping>>, an HTTP 400 response is returned by default."
msgstr "マルチパートボディを読むために、RESTEasy Reactive は適切な MessageBodyReader を呼び出します。 link:{jaxrsapi}/javax/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`] を呼び出します。これらの部分の 1 つに `IOException` が発生すると (たとえば、Jackson が JSON 部分をデシリアライズできなかった場合など)、 `org.jboss.resteasy.reactive.server.multipart.MultipartPartReadingException` がスローされる。この例外が link:#exception-mapping[[例外マッピング]] で述べたようにアプリケーションによって処理されない場合、デフォルトで HTTP 400 応答が返されます。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:554
#, no-wrap
msgid "Returning a response body"
msgstr "レスポンス本文を返す"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:559
msgid "In order to return an HTTP response, simply return the resource you want from your method. The method return type and its optional content type will be used to decide how to serialise it to the HTTP response (see <<negotiation>> for more advanced information)."
msgstr "HTTP レスポンスを返すには、単にメソッドから必要なリソースを返します。メソッドの戻り値の型とオプションのコンテントタイプをもとに、HTTP レスポンスへのシリアライズ方法を決定します (より詳細な情報については <<negotiation>> を参照ください)。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:562
msgid "You can return any of the pre-defined types that you can read from the <<resource-types,HTTP response>>, and any other type will be mapped <<json,from that type to JSON>>."
msgstr "<<resource-types,HTTP レスポンス>> から読み取れる、あらかじめ定義された任意の型を返すことができ、それ以外の型は<<json,型からJSON>> にマッピングされます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:564
msgid "In addition, the following return types are also supported:"
msgstr "さらに、次の戻り値の型もサポートされています。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:565
#, no-wrap
msgid "Table Additional response body parameter type"
msgstr "表 追加のレスポンスボディパラメータータイプ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:570
#, no-wrap
msgid "link:{jdkapi}/java/nio/file/Path.html[`Path`]"
msgstr "link:{jdkapi}/java/nio/file/Path.html[`Path`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:572
#, no-wrap
msgid "The contents of the file specified by the given path"
msgstr "指定されたパスで指定されたファイルの内容"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:573
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PathPart.html[`PathPart`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PathPart.html[`PathPart`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:575
#, no-wrap
msgid "The partial contents of the file specified by the given path"
msgstr "指定されたパスで指定されたファイルの部分的な内容"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:576
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/FilePart.html[`FilePart`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/FilePart.html[`FilePart`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:578
#, no-wrap
msgid "The partial contents of a file"
msgstr "ファイルの部分的な内容"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:579
#, no-wrap
msgid "link:{vertxapi}/io/vertx/core/file/AsyncFile.html[`AsyncFile`]"
msgstr "link:{vertxapi}/io/vertx/core/file/AsyncFile.html[`AsyncFile`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:581
#, no-wrap
msgid "Vert.x AsyncFile, which can be in full, or partial"
msgstr "Vert.x AsyncFile、完全または部分的"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:587
msgid "Alternately, you can also return a <<reactive,reactive type>> such as link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`], link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] or link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`] that resolve to one of the mentioned return types."
msgstr "あるいは、 link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] 、link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] または link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`] など、前述の戻り値の型に解決して、<<reactive,リアクティブ型>> を返すことも可能です。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:588
#, no-wrap
msgid "Setting other response properties"
msgstr "他のレスポンスプロパティーの設定"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:590
#, no-wrap
msgid "Manually setting the response"
msgstr "手動でレスポンスを設定する"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:595
msgid "If you need to set more properties on the HTTP response than just the body, such as the status code or headers, you can make your method return `org.jboss.resteasy.reactive.RestResponse` from a resource method.  An example of this could look like:"
msgstr "ステータスコードやヘッダーなど、本文だけでなく HTTP レスポンスに多くのプロパティーを設定する必要がある場合は、リソースメソッドからメソッドに `org.jboss.resteasy.reactive.RestResponse` を返すようにすることができます。この例は次のようになります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:603
#, no-wrap
msgid ""
"import java.time.Duration;\n"
"import java.time.Instant;\n"
"import java.util.Date;\n"
msgstr ""
"import java.time.Duration;\n"
"import java.time.Instant;\n"
"import java.util.Date;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:608
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.NewCookie;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.NewCookie;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:611
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.RestResponse;\n"
"import org.jboss.resteasy.reactive.RestResponse.ResponseBuilder;\n"
msgstr ""
"import org.jboss.resteasy.reactive.RestResponse;\n"
"import org.jboss.resteasy.reactive.RestResponse.ResponseBuilder;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:629
#, no-wrap
msgid ""
"    @GET\n"
"    public RestResponse<String> hello() {\n"
"        // HTTP OK status with text/plain content type\n"
"        return ResponseBuilder.ok(\"Hello, World!\", MediaType.TEXT_PLAIN_TYPE)\n"
"         // set a response header\n"
"         .header(\"X-Cheese\", \"Camembert\")\n"
"         // set the Expires response header to two days from now\n"
"         .expires(Date.from(Instant.now().plus(Duration.ofDays(2))))\n"
"         // send a new cookie\n"
"         .cookie(new NewCookie(\"Flavour\", \"chocolate\"))\n"
"         // end of builder API\n"
"         .build();\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public RestResponse<String> hello() {\n"
"        // HTTP OK status with text/plain content type\n"
"        return ResponseBuilder.ok(\"Hello, World!\", MediaType.TEXT_PLAIN_TYPE)\n"
"         // set a response header\n"
"         .header(\"X-Cheese\", \"Camembert\")\n"
"         // set the Expires response header to two days from now\n"
"         .expires(Date.from(Instant.now().plus(Duration.ofDays(2))))\n"
"         // send a new cookie\n"
"         .cookie(new NewCookie(\"Flavour\", \"chocolate\"))\n"
"         // end of builder API\n"
"         .build();\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:633
msgid "You can also use the JAX-RS type link:{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`] but it is not strongly typed to your entity."
msgstr "また、JAX-RS タイプの link:{jaxrsapi}/javax/ws/rs/core/Response.html[`レスポンス`] を使用することもできますが、エンティティーに強く型付けされるわけではありません。"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:634
#, no-wrap
msgid "Using annotations"
msgstr "アノテーションの使用"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:638
msgid "Alternatively, if you only need to set the status code and / or HTTP headers with static values, you can use `@org.jboss.resteasy.reactive.ResponseStatus` and /or `ResponseHeader` respectively.  An example of this could look like:"
msgstr "または、静的な値でステータスコードや HTTP ヘッダーのみを設定する必要がある場合は、それぞれ `@org.jboss.resteasy.reactive.ResponseStatus` および/または  `ResponseHeader` を使用できます。この例は次のようになります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:646
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.Header;\n"
"import org.jboss.resteasy.reactive.ResponseHeaders;\n"
"import org.jboss.resteasy.reactive.ResponseStatus;\n"
msgstr ""
"import org.jboss.resteasy.reactive.Header;\n"
"import org.jboss.resteasy.reactive.ResponseHeaders;\n"
"import org.jboss.resteasy.reactive.ResponseStatus;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:660
#, no-wrap
msgid ""
"    @ResponseStatus(201)\n"
"    @ResponseHeader(name = \"X-Cheese\", value = \"Camembert\")\n"
"    @GET\n"
"    public String hello() {\n"
"        return \"Hello, World!\";\n"
"    }\n"
"}\n"
msgstr ""
"    @ResponseStatus(201)\n"
"    @ResponseHeader(name = \"X-Cheese\", value = \"Camembert\")\n"
"    @GET\n"
"    public String hello() {\n"
"        return \"Hello, World!\";\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:662
#, no-wrap
msgid "Async/reactive support"
msgstr "非同期/リアクティブサポート"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:672
msgid "If your endpoint method needs to accomplish an asynchronous or reactive task before being able to answer, you can declare your method to return the link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] type (from https://smallrye.io/smallrye-mutiny/[Mutiny]), in which case the current HTTP request will be automatically suspended after your method, until the returned link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] instance resolves to a value, which will be mapped to a response exactly according to the previously described rules:"
msgstr "エンドポイントメソッドがレスポンスする前に非同期またはリアクティブタスクを実行する必要がある場合は、メソッドを宣言して( https://smallrye.io/smallrye-mutiny/[Mutiny] の) link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] 型を返すことができます 。この場合、現在の HTTP リクエストはメソッドの後で、返されたlink:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] インスタンスが値に解決され、前述のルールに従って正確にレスポンスにマッピングされるまで自動的に一時停止されます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:681
#: upstream/_guides/resteasy-reactive.adoc:1571
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr "import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:684
#: upstream/_guides/resteasy-reactive.adoc:767
#, no-wrap
msgid ""
"@Path(\"escoffier\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"escoffier\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:690
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Book> culinaryGuide() {\n"
"        return Book.findByIsbn(\"978-2081229297\");\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public Uni<Book> culinaryGuide() {\n"
"        return Book.findByIsbn(\"978-2081229297\");\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:696
msgid "This allows you to not block the event-loop thread while the book is being fetched from the database, and allows Quarkus to serve more requests until your book is ready to be sent to the client and terminate this request. Check out our <<execution-model,Execution Model documentation>> for more information."
msgstr "これにより、book がデータベースから取得されている間、イベントループスレッドをブロックせず、book がクライアントに送信できるようになるまで Quarkus がより多くのリクエストに対応し、このリクエストを終了させることができます。詳しくは、<<execution-model,実行モデルドキュメント>> を参照してください。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:699
msgid "The link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`] return type is also supported."
msgstr "link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`] 戻り値の型もサポートされています。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:700
#, no-wrap
msgid "Streaming support"
msgstr "ストリーミングサポート"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:705
msgid "If you want to stream your response element by element, you can make your endpoint method return a link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] type (from https://smallrye.io/smallrye-mutiny/[Mutiny]).  This is especially useful for streaming text or binary data."
msgstr "レスポンスを要素ごとにストリーミングする場合は、エンドポイントメソッドに( https://smallrye.io/smallrye-mutiny/[Mutiny] の) link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] 型を返すようにすることができます。これは、テキストまたはバイナリーデータのストリーミングに特に役立ちます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:708
msgid "This example, using https://github.com/quarkiverse/quarkus-reactive-messaging-http[Reactive Messaging HTTP] shows how to stream text data:"
msgstr "この例では、 https://github.com/quarkiverse/quarkus-reactive-messaging-http[Reactive Messaging HTTP] を使用して、テキストデータをストリーミングする方法を示しています。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:716
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:718
#, no-wrap
msgid "import org.eclipse.microprofile.reactive.messaging.Channel;\n"
msgstr "import org.eclipse.microprofile.reactive.messaging.Channel;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:720
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr "import io.smallrye.mutiny.Multi;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:723
#, no-wrap
msgid ""
"@Path(\"logs\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"logs\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:727
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"log-out\")\n"
"    Multi<String> logs;\n"
msgstr ""
"    @Inject\n"
"    @Channel(\"log-out\")\n"
"    Multi<String> logs;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:733
#, no-wrap
msgid ""
"    @GET\n"
"    public Multi<String> streamLogs() {\n"
"        return logs;\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public Multi<String> streamLogs() {\n"
"        return logs;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:738
msgid "Response filters are **not** invoked on streamed responses, because they would give a false impression that you can set headers or HTTP status codes, which is not true after the initial response. Exception mappers are also not invoked because part of the response may already have been written."
msgstr "レスポンスフィルターは、ストリーミングされたレスポンスでは呼び出されません。これは、ヘッダーまたは HTTP ステータスコードを設定できるという誤った印象を与えるためです。これは、最初のレスポンスの後では当てはまりません。レスポンスの一部がすでに書き込まれている可能性があるため、例外マッパーも呼び出されません。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:739
#, no-wrap
msgid "Server-Sent Event (SSE) support"
msgstr "サーバー送信イベント (SSE) のサポート"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:747
msgid "If you want to stream JSON objects in your response, you can use https://html.spec.whatwg.org/multipage/server-sent-events.html[Server-Sent Events] by just annotating your endpoint method with link:{jaxrsapi}/javax/ws/rs/Produces.html[`@Produces(MediaType.SERVER_SENT_EVENTS)`] and specifying that each element should be <<json,serialised to JSON>> with `@RestStreamElementType(MediaType.APPLICATION_JSON)`."
msgstr "レスポンスで JSON オブジェクトをストリーミングする場合は、エンドポイントメソッドに link:{jaxrsapi}/javax/ws/rs/Produces.html[`@Produces(MediaType.SERVER_SENT_EVENTS)`] で注釈を付けるだけで、 https://html.spec.whatwg.org/multipage/server-sent-events.html[Server-Sent Events]を使用できます。そして指定した場合、 `@RestStreamElementType (MediaType.APPLICATION_JSON)` を使用し各要素は <<json,JSONにシリアライズ>> されるべきです。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:757
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:759
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestStreamElementType;\n"
msgstr "import org.jboss.resteasy.reactive.RestStreamElementType;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:762
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""
"import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:764
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Channel;\n"
msgstr "import io.smallrye.reactive.messaging.annotations.Channel;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:772
#, no-wrap
msgid ""
"    // Inject our Book channel\n"
"    @Inject\n"
"    @Channel(\"book-out\")\n"
"    Multi<Book> books;\n"
msgstr ""
"    // Inject our Book channel\n"
"    @Inject\n"
"    @Channel(\"book-out\")\n"
"    Multi<Book> books;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:782
#, no-wrap
msgid ""
"    @GET\n"
"    // Send the stream over SSE\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    // Each element will be sent as JSON\n"
"    @RestStreamElementType(MediaType.APPLICATION_JSON)\n"
"    public Multi<Book> stream() {\n"
"        return books;\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    // Send the stream over SSE\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    // Each element will be sent as JSON\n"
"    @RestStreamElementType(MediaType.APPLICATION_JSON)\n"
"    public Multi<Book> stream() {\n"
"        return books;\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:784
#, no-wrap
msgid "Controlling HTTP Caching features"
msgstr "HTTP キャッシング機能の制御"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:789
msgid "RESTEasy Reactive provides the link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`] and link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`] annotations to facilitate handling HTTP caching semantics, i.e. setting the 'Cache-Control' HTTP header."
msgstr "RESTEasy Reactive は、HTTP キャッシングセマンティックスの処理、つまり 'Cache-Control' HTTP ヘッダーの設定を容易にするために、link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`] と link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`] というアノテーションを提供します。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:792
msgid "These annotations can be placed either on a Resource Method or a Resource Class (in which case it applies to all Resource Methods of the class that do *not* contain the same annotation) and allow users to return domain objects and not have to deal with building up the `Cache-Control` HTTP header explicitly."
msgstr "これらのアノテーションはリソースメソッドまたはリソースクラス (この場合、同じアノテーションを *含まない* クラスのすべてのリソースメソッドに適用されます) に配置することができ、ユーザーがドメインオブジェクトを返すことができ、明示的に `Cache-Control` HTTP ヘッダーを構築することに対処する必要はありません。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:796
msgid "While link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`] builds a complex `Cache-Control` header, link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`] is a simplified notation to say that you don't want anything cached; i.e. `Cache-Control: nocache`."
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`] が複雑な `Cache-Control` ヘッダーを構築するのに対し、link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`] は何もキャッシュさせたくない、つまり `Cache-Control: nocache` というシンプルな表記法になっています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:798
msgid "More information on the `Cache-Control` header and be found in link:https://datatracker.ietf.org/doc/html/rfc7234[RFC 7234]"
msgstr "`Cache-Control` ヘッダーの詳細は、 link:https://datatracker.ietf.org/doc/html/rfc7234[RFC 7234] を参照してください"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:799
#, no-wrap
msgid "Accessing context objects"
msgstr "コンテキストオブジェクトへのアクセス"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:805
msgid "There are a number of contextual objects that the framework will give you, if your endpoint method takes parameters of the following type:"
msgstr "エンドポイントメソッドが次のタイプのパラメーターを受け取る場合、フレームワークが提供するコンテキストオブジェクトは多数あります。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:806
#: upstream/_guides/resteasy-reactive.adoc:943
#: upstream/_guides/resteasy-reactive.adoc:1149
#: upstream/_guides/resteasy-reactive.adoc:1255
#: upstream/_guides/resteasy-reactive.adoc:1348
#, no-wrap
msgid "Table Context object"
msgstr "テーブルコンテキストオブジェクト"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:811
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/core/HttpHeaders.html[`HttpHeaders`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/core/HttpHeaders.html[`HttpHeaders`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:813
#, no-wrap
msgid "All the request headers"
msgstr "すべてのリクエストヘッダー"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:814
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/container/ResourceInfo.html[`ResourceInfo`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/container/ResourceInfo.html[`ResourceInfo`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:816
#, no-wrap
msgid "Information about the current endpoint method and class (requires reflection)"
msgstr "現在のエンドポイントメソッドとクラスに関する情報 (リフレクションが必要)"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:817
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/core/SecurityContext.html[`SecurityContext`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/core/SecurityContext.html[`SecurityContext`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:819
#, no-wrap
msgid "Access to the current user and roles"
msgstr "現在のユーザーとロールへのアクセス"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:820
#, no-wrap
msgid "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/SimpleResourceInfo.html[`SimpleResourceInfo`]"
msgstr "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/SimpleResourceInfo.html[`SimpleResourceInfo`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:822
#, no-wrap
msgid "Information about the current endpoint method and class (no reflection required)"
msgstr "現在のエンドポイントメソッドとクラスに関する情報 (反映は不要)"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:823
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/core/UriInfo.html[`UriInfo`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/core/UriInfo.html[`UriInfo`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:825
#, no-wrap
msgid "Provides information about the current endpoint and application URI"
msgstr "現在のエンドポイントとアプリケーション URI に関する情報を提供します"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:826
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/core/Application.html[`Application`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/core/Application.html[`Application`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:828
#, no-wrap
msgid "Advanced: Current JAX-RS application class"
msgstr "詳細: 現在の JAX-RS アプリケーションクラス"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:829
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/core/Configuration.html[`Configuration`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/core/Configuration.html[`Configuration`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:831
#, no-wrap
msgid "Advanced: Configuration about the deployed JAX-RS application"
msgstr "詳細: デプロイされた JAX-RS アプリケーションに関する設定"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:832
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/ext/Providers.html[`Providers`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/ext/Providers.html[`Providers`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:834
#, no-wrap
msgid "Advanced: Runtime access to JAX-RS providers"
msgstr "詳細: JAX-RS プロバイダーへのランタイムアクセス"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:835
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/core/Request.html[`Request`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/core/Request.html[`Request`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:837
#, no-wrap
msgid "Advanced: Access to the current HTTP method and <<preconditions>>"
msgstr "詳細: 現在の HTTP メソッドへのアクセスと <<preconditions,条件>>"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:838
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/core/ResourceContext.html[`ResourceContext`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/core/ResourceContext.html[`ResourceContext`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:840
#, no-wrap
msgid "Advanced: access to instances of endpoints"
msgstr "詳細: エンドポイントのインスタンスへのアクセス"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:841
#, no-wrap
msgid "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerRequestContext.html[`ServerRequestContext`]"
msgstr "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerRequestContext.html[`ServerRequestContext`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:843
#, no-wrap
msgid "Advanced: RESTEasy Reactive access to the current request/response"
msgstr "詳細:RESTEasy 現在の要求/レスポンスへのリアクティブアクセス"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:844
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/sse/Sse.html[`Sse`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/sse/Sse.html[`Sse`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:846
#, no-wrap
msgid "Advanced: Complex SSE use-cases"
msgstr "詳細: 複雑な SSE のユースケース"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:847
#, no-wrap
msgid "link:{vertxapi}/io/vertx/core/http/HttpServerRequest.html[`HttpServerRequest`]"
msgstr "link:{vertxapi}/io/vertx/core/http/HttpServerRequest.html[`HttpServerRequest`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:849
#, no-wrap
msgid "Advanced: Vert.x HTTP Request"
msgstr "詳細: Vert.xHTTP リクエスト"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:850
#, no-wrap
msgid "link:{vertxapi}/io/vertx/core/http/HttpServerResponse.html[`HttpServerResponse`]"
msgstr "link:{vertxapi}/io/vertx/core/http/HttpServerResponse.html[`HttpServerResponse`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:852
#, no-wrap
msgid "Advanced: Vert.x HTTP Response"
msgstr "詳細: Vert..x HTTP レスポンス"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:855
msgid "For example, here is how you can return the name of the currently logged-in user:"
msgstr "たとえば、現在ログインしているユーザーの名前を返す方法は次のとおりです。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:861
#: upstream/_guides/resteasy-reactive.adoc:886
#: upstream/_guides/resteasy-reactive.adoc:914
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr "import java.security.Principal;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:865
#: upstream/_guides/resteasy-reactive.adoc:892
#: upstream/_guides/resteasy-reactive.adoc:918
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.SecurityContext;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:868
#: upstream/_guides/resteasy-reactive.adoc:895
#: upstream/_guides/resteasy-reactive.adoc:921
#, no-wrap
msgid ""
"@Path(\"user\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"user\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:875
#, no-wrap
msgid ""
"    @GET\n"
"    public String userName(SecurityContext security) {\n"
"        Principal user = security.getUserPrincipal();\n"
"        return user != null ? user.getName() : \"<NOT LOGGED IN>\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public String userName(SecurityContext security) {\n"
"        Principal user = security.getUserPrincipal();\n"
"        return user != null ? user.getName() : \"<NOT LOGGED IN>\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:880
msgid "You can also inject those context objects using https://javadoc.io/static/javax.inject/javax.inject/1/javax/inject/Inject.html[`@Inject`] on fields of the same type:"
msgstr "同じタイプのフィールドに https://javadoc.io/static/javax.inject/javax.inject/1/javax/inject/Inject.html[`@Inject`] を使用して、これらのコンテキストオブジェクトを挿入することもできます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:888
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr "import javax.inject.Inject;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:898
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityContext security;\n"
msgstr ""
"    @Inject\n"
"    SecurityContext security;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:905
#: upstream/_guides/resteasy-reactive.adoc:934
#, no-wrap
msgid ""
"    @GET\n"
"    public String userName() {\n"
"        Principal user = security.getUserPrincipal();\n"
"        return user != null ? user.getName() : \"<NOT LOGGED IN>\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public String userName() {\n"
"        Principal user = security.getUserPrincipal();\n"
"        return user != null ? user.getName() : \"<NOT LOGGED IN>\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:908
msgid "Or even on your endpoint constructor:"
msgstr "または、エンドポイントコンストラクターでも:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:923
#, no-wrap
msgid "    SecurityContext security;\n"
msgstr "    SecurityContext security;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:927
#, no-wrap
msgid ""
"    Endpoint(SecurityContext security) {\n"
"        this.security = security;\n"
"    }\n"
msgstr ""
"    Endpoint(SecurityContext security) {\n"
"        this.security = security;\n"
"    }\n"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:937
#, no-wrap
msgid "JSON serialisation"
msgstr "JSON シリアル化"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:942
msgid "Instead of importing `io.quarkus:quarkus-resteasy-reactive`, you can import either of the following modules to get support for JSON:"
msgstr "`io.quarkus:quarkus-resteasy-reactive` をインポートする代わりに、以下のモジュールのいずれかをインポートすることで、JSON のサポートを受けることができます。"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:945
#: upstream/_guides/resteasy-reactive.adoc:1151
#: upstream/_guides/resteasy-reactive.adoc:1257
#: upstream/_guides/resteasy-reactive.adoc:1350
#, no-wrap
msgid "GAV"
msgstr "GAV"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:948
#, no-wrap
msgid "`io.quarkus:quarkus-resteasy-reactive-jackson`"
msgstr "`io.quarkus:quarkus-resteasy-reactive-jackson`"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:950
#, no-wrap
msgid "https://github.com/FasterXML/jackson[Jackson support]"
msgstr "https://github.com/FasterXML/jackson[Jackson support]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:951
#, no-wrap
msgid "`io.quarkus:quarkus-resteasy-reactive-jsonb`"
msgstr "`io.quarkus:quarkus-resteasy-reactive-jsonb`"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:953
#, no-wrap
msgid "https://eclipse-ee4j.github.io/jsonb-api/[JSON-B support]"
msgstr "https://eclipse-ee4j.github.io/jsonb-api/[JSON-B support]"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:958
msgid "In both cases, importing those modules will allow HTTP message bodies to be read from JSON and serialised to JSON, for <<resource-types,all the types not already registered with a more specific serialisation>>."
msgstr "どちらの場合も、これらのモジュールをインポートすると、 <<resource-types,より具体的なシリアライゼーションで既に登録されていないすべての型>>について HTTP メッセージ本文を JSON から読み取り、JSON にシリアル化できるようになります。"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:959
#, no-wrap
msgid "Advanced Jackson-specific features"
msgstr "詳細なJackson固有の機能"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:962
msgid "When using the `quarkus-resteasy-reactive-jackson` extension there are some advanced features that RESTEasy Reactive supports."
msgstr "`quarkus-resteasy-reactive-jackson` エクステンションを使用する場合、RESTEasy Reactive がサポートするいくつかの高度な機能があります。"

#. type: Title =====
#: upstream/_guides/resteasy-reactive.adoc:964
#, no-wrap
msgid "Secure serialization"
msgstr "安全なシリアル化"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:968
msgid "When used with Jackson to perform JSON serialization, RESTEasy Reactive provides the ability to limit the set of fields that are serialized based on the roles of the current user.  This is achieved by simply annotating the fields (or getters) of the POJO being returned with `@io.quarkus.resteasy.reactive.jackson.SecureField`."
msgstr "JSON をシリアライズするために Jackson を使用する場合、RESTEasy Reactive は、現在のユーザのroleに基づいてシリアライズされるフィールドのセットを制限する機能を提供します。これは、返されるPOJOのフィールド（またはゲッター）を `@io.quarkus.resteasy.reactive.jackson.SecureField` でアノテーションするだけで実現できます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:970
msgid "A simple example could be the following:"
msgstr "簡単な例を挙げると、次のようになります:"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:972
msgid "Assume we have a POJO named `Person` which looks like so:"
msgstr "`Person` という名前のPOJOがあり、以下のようになっているとします:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:978
#, no-wrap
msgid "import io.quarkus.resteasy.reactive.jackson.SecureField;\n"
msgstr "import io.quarkus.resteasy.reactive.jackson.SecureField;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:980
#, no-wrap
msgid "public class Person {\n"
msgstr "public class Person {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:985
#, no-wrap
msgid ""
"    @SecureField(rolesAllowed = \"admin\")\n"
"    private final Long id;\n"
"    private final String first;\n"
"    private final String last;\n"
msgstr ""
"    @SecureField(rolesAllowed = \"admin\")\n"
"    private final Long id;\n"
"    private final String first;\n"
"    private final String last;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:991
#, no-wrap
msgid ""
"    public Person(Long id, String first, String last) {\n"
"        this.id = id;\n"
"        this.first = first;\n"
"        this.last = last;\n"
"    }\n"
msgstr ""
"    public Person(Long id, String first, String last) {\n"
"        this.id = id;\n"
"        this.first = first;\n"
"        this.last = last;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:995
#, no-wrap
msgid ""
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""
"    public Long getId() {\n"
"        return id;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:999
#, no-wrap
msgid ""
"    public String getFirst() {\n"
"        return first;\n"
"    }\n"
msgstr ""
"    public String getFirst() {\n"
"        return first;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1004
#, no-wrap
msgid ""
"    public String getLast() {\n"
"        return last;\n"
"    }\n"
"}\n"
msgstr ""
"    public String getLast() {\n"
"        return last;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1007
msgid "A very simple JAX-RS Resource that uses `Person` could be:"
msgstr "`Person` を使用する非常にシンプルな JAX-RS Resource は次のようになります:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1017
#, no-wrap
msgid ""
"@Path(\"person\")\n"
"public class Person {\n"
msgstr ""
"@Path(\"person\")\n"
"public class Person {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1024
#, no-wrap
msgid ""
"    @Path(\"{id}\")\n"
"    @GET\n"
"    public Person getPerson(Long id) {\n"
"        return new Person(id, \"foo\", \"bar\");\n"
"    }\n"
"}\n"
msgstr ""
"    @Path(\"{id}\")\n"
"    @GET\n"
"    public Person getPerson(Long id) {\n"
"        return new Person(id, \"foo\", \"bar\");\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1028
msgid "Assuming security has been set up for the application (see our xref:security.adoc[guide] for more details), when a user with the `admin` role performs an HTTP GET on `/person/1` they will receive:"
msgstr "アプリケーションのセキュリティーが設定されていると仮定すると (詳細は xref:security.adoc[ガイド] を参照)、`admin` ロールを持つユーザーが `/person/1` に対して HTTP GET を実行すると、次のようなメッセージが表示されます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1036
#, no-wrap
msgid ""
"{\n"
"  \"id\": 1,\n"
"  \"first\": \"foo\",\n"
"  \"last\": \"bar\"\n"
"}\n"
msgstr ""
"{\n"
"  \"id\": 1,\n"
"  \"first\": \"foo\",\n"
"  \"last\": \"bar\"\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1039
msgid "as the response."
msgstr "レスポンスを閉じます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1041
msgid "Any user however that does not have the `admin` role will receive:"
msgstr "ただし、`admin` ロールを持たないユーザーは次のものを受け取ります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1048
#, no-wrap
msgid ""
"{\n"
"  \"first\": \"foo\",\n"
"  \"last\": \"bar\"\n"
"}\n"
msgstr ""
"{\n"
"  \"first\": \"foo\",\n"
"  \"last\": \"bar\"\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1052
#, fuzzy
msgid "No additional configuration needs to be applied for this secure serialization to take place. However, users can use the `@io.quarkus.resteasy.reactive.jackson.EnableSecureSerialization` and `@io.quarkus.resteasy.reactive.jackson.DisableSecureSerialization` annotation to opt in or out for specific JAX-RS Resource classes or methods."
msgstr "この安全なシリアル化を実行するために、追加の設定を適用する必要はありません。ただし、ユーザーは `@io.quarkus.resteasy.reactive.jackson.EnableSecureSerialization`と`@io.quarkus.resteasy.reactive.jackson.DisableSecureSerialization` アノテーションを使って、特定の JAX-RS Resource クラスまたはメソッドを選択することも可能です。"

#. type: Title =====
#: upstream/_guides/resteasy-reactive.adoc:1053
#, no-wrap
msgid "@JsonView support"
msgstr "@JsonView support"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1057
msgid "JAX-RS methods can be annotated with https://fasterxml.github.io/jackson-annotations/javadoc/2.10/com/fasterxml/jackson/annotation/JsonView.html[@JsonView] in order to customize the serialization of the returned POJO, on a per method-basis. This is best explained with an example."
msgstr "JAX-RS のメソッドに https://fasterxml.github.io/jackson-annotations/javadoc/2.10/com/fasterxml/jackson/annotation/JsonView.html[@JsonView] のアノテーションを付けると、返される POJO のシリアル化をメソッド単位でカスタマイズすることが可能です。これは例で説明するのが一番わかりやすいでしょう。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1059
msgid "A typical use of `@JsonView` is to hide certain fields on certain methods. In that vein, let's define two views:"
msgstr "`@JsonView` の一般的な使用法は、特定のメソッドの特定のフィールドを非表示にすることです。その流れの中で、2 つのビューを定義しましょう。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1063
#, no-wrap
msgid "public class Views {\n"
msgstr "public class Views {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1066
#, no-wrap
msgid ""
"    public static class Public {\n"
"    }\n"
msgstr ""
"    public static class Public {\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1070
#, no-wrap
msgid ""
"    public static class Private extends Public {\n"
"    }\n"
"}\n"
msgstr ""
"    public static class Private extends Public {\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1073
msgid "Let's assume we have the `User` POJO on which we want to hide some field during serialization. A simple example of this is:"
msgstr "シリアル化中にフィールドを非表示にする `User` POJO があると仮定します。この簡単な例は次のとおりです。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1077
#, no-wrap
msgid "public class User {\n"
msgstr "public class User {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1080
#, no-wrap
msgid ""
"    @JsonView(Views.Private.class)\n"
"    public int id;\n"
msgstr ""
"    @JsonView(Views.Private.class)\n"
"    public int id;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1084
#, no-wrap
msgid ""
"    @JsonView(Views.Public.class)\n"
"    public String name;\n"
"}\n"
msgstr ""
"    @JsonView(Views.Public.class)\n"
"    public String name;\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1088
msgid "Depending on the JAX-RS method that returns this user, we might want to exclude the `id` field from serialization - for example you might want an insecure method to not expose this field. The way we can achieve that in RESTEasy Reactive is shown in the following example:"
msgstr "このユーザーを返す JAX-RS メソッドによっては、シリアル化から `id` フィールドを除外したい場合があります。たとえば、安全でないメソッドでこのフィールドを公開しないようにしたい場合があります。RESTEasy Reactive でそれを実現する方法を、次の例に示します。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1097
#, no-wrap
msgid ""
"@JsonView(Views.Public.class)\n"
"@GET\n"
"@Path(\"/public\")\n"
"public User userPublic() {\n"
"    return testUser();\n"
"}\n"
msgstr ""
"@JsonView(Views.Public.class)\n"
"@GET\n"
"@Path(\"/public\")\n"
"public User userPublic() {\n"
"    return testUser();\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1104
#, no-wrap
msgid ""
"@JsonView(Views.Private.class)\n"
"@GET\n"
"@Path(\"/private\")\n"
"public User userPrivate() {\n"
"    return testUser();\n"
"}\n"
msgstr ""
"@JsonView(Views.Private.class)\n"
"@GET\n"
"@Path(\"/private\")\n"
"public User userPrivate() {\n"
"    return testUser();\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1108
msgid "When the result the `userPublic` method is serialized, the `id` field will not be contained in the response as the `Public` view does not include it.  The result of `userPrivate` however will include the `id` as expected when serialized."
msgstr "結果の `userPublic` メソッドがシリアル化されると、`Public` ビューに含まれないため、`id` フィールドはレスポンスに含まれません。ただし、`userPrivate` の結果には、シリアル化されたときに期待されるように `id` が含まれます。"

#. type: Title =====
#: upstream/_guides/resteasy-reactive.adoc:1109
#, no-wrap
msgid "Completely customized per method serialization"
msgstr "メソッドごとに完全にカスタマイズされたシリアル化"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1113
msgid "There are times when you need to completely customize the serialization of a POJO on a per JAX-RS method basis. For such use cases, the `@io.quarkus.resteasy.reactive.jackson.CustomSerialization` annotation is a great tool, as it allows you to configure a per-method `com.fasterxml.jackson.databind.ObjectWriter` which can be configured at will."
msgstr "JAX-RS のメソッドごとに POJO のシリアル化を完全にカスタマイズする必要がある場合があります。このような場合、`@io.quarkus.resteasy.reactive.jackson.CustomSerialization` アノテーションは素晴らしいツールで、自由に設定できる `com.fasterxml.jackson.databind.ObjectWriter` というメソッド単位で設定することが可能です。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1115
msgid "Here is an example use case:"
msgstr "ユースケースの例を次に示します。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1124
#, no-wrap
msgid ""
"@CustomSerialization(UnquotedFields.class)\n"
"@GET\n"
"@Path(\"/invalid-use-of-custom-serializer\")\n"
"public User invalidUseOfCustomSerializer() {\n"
"    return testUser();\n"
"}\n"
msgstr ""
"@CustomSerialization(UnquotedFields.class)\n"
"@GET\n"
"@Path(\"/invalid-use-of-custom-serializer\")\n"
"public User invalidUseOfCustomSerializer() {\n"
"    return testUser();\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1127
msgid "where `UnquotedFields` is a `BiFunction` defined as so:"
msgstr "ここで、`UnquotedFields` は次のように定義された `BiFunction` です。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1131
#, no-wrap
msgid "public static class UnquotedFields implements BiFunction<ObjectMapper, Type, ObjectWriter> {\n"
msgstr "public static class UnquotedFields implements BiFunction<ObjectMapper, Type, ObjectWriter> {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1137
#, no-wrap
msgid ""
"    @Override\n"
"    public ObjectWriter apply(ObjectMapper objectMapper, Type type) {\n"
"        return objectMapper.writer().without(JsonWriteFeature.QUOTE_FIELD_NAMES);\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public ObjectWriter apply(ObjectMapper objectMapper, Type type) {\n"
"        return objectMapper.writer().without(JsonWriteFeature.QUOTE_FIELD_NAMES);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1140
msgid "Essentially what this class does is force Jackson to not include quotes in the field names."
msgstr "基本的にこのクラスが行うことは、フィールド名に引用符を含めないよう Jackson に強制することです。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1142
msgid "It is important to note that this customization is only performed for the serialization of the JAX-RS methods that use `@CustomSerialization(UnquotedFields.class)`."
msgstr "このカスタマイズは `@CustomSerialization(UnquotedFields.class)` を使用する JAX-RS メソッドのシリアル化にのみ行われることに注意することが重要です。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1143
#, no-wrap
msgid "XML serialisation"
msgstr "XML シリアル化"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1148
msgid "To enable XML support, add the `quarkus-resteasy-reactive-jaxb` extension to your project."
msgstr "XML サポートを有効にするには、プロジェクトに `quarkus-resteasy-reactive-jaxb` エクステンションを追加します。"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1154
#, no-wrap
msgid "`io.quarkus:quarkus-resteasy-reactive-jaxb`"
msgstr "`io.quarkus:quarkus-resteasy-reactive-jaxb`"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1156
#, no-wrap
msgid "https://javaee.github.io/jaxb-v2/[XML support]"
msgstr "https://javaee.github.io/jaxb-v2/[XML support]"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1161
msgid "Importing this module will allow HTTP message bodies to be read from XML and serialised to XML, for <<resource-types,all the types not already registered with a more specific serialisation>>."
msgstr "このモジュールをインポートすると、HTTP メッセージ本文を XML から読み込み、XML にシリアル化することができます (<<resource-types,all the types not already registered with a more specific serialisation>>)。"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:1162
#, fuzzy, no-wrap
msgid "Advanced JAXB-specific features"
msgstr "詳細なJackson固有の機能"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1165
#, fuzzy
msgid "When using the `quarkus-resteasy-reactive-jaxb` extension there are some advanced features that RESTEasy Reactive supports."
msgstr "`quarkus-resteasy-reactive-jackson` エクステンションを使用する場合、RESTEasy Reactive がサポートするいくつかの高度な機能があります。"

#. type: Title =====
#: upstream/_guides/resteasy-reactive.adoc:1166
#, fuzzy, no-wrap
msgid "Inject JAXB components"
msgstr "JAXBコンポーネントのインジェクト"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1169
#, fuzzy
msgid "The JAXB resteasy reactive extension will serialize and unserialize requests and responses transparently for users. However, if you need finer grain control over JAXB components, you can inject either the JAXBContext, Marshaller, or Unmarshaller components into your beans:"
msgstr "JAXB resteasy reactive 拡張は、ユーザーに対して透過的にリクエストとレスポンスのシリアライズとアンシリアライズを行います。しかし、JAXB コンポーネントをより細かく制御する必要がある場合は、JAXBContext、Marshaller、または Unmarshaller コンポーネントのいずれかをビーンに注入することができます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1174
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1177
#, fuzzy, no-wrap
msgid ""
"    @Inject\n"
"    JAXBContext jaxbContext;\n"
msgstr ""
"    @Inject\n"
"    SecurityContext security;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1180
#, fuzzy, no-wrap
msgid ""
"    @Inject\n"
"    Marshaller marshaller;\n"
msgstr ""
"    @Inject\n"
"    CheeseService cheeses;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1183
#, no-wrap
msgid ""
"    @Inject\n"
"    Unmarshaller unmarshaller;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1186
#: upstream/_guides/resteasy-reactive.adoc:1338
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""
"    // ...\n"
"}\n"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1191
#, fuzzy
msgid "Quarkus will automatically find all the classes annotated with `@XmlRootElement` and then bound them to the JAXB context."
msgstr "Quarkus は、 `@XmlRootElement` でアノテーションされたすべてのクラスを自動的に検索し、それらを JAXB コンテキストにバインドします。"

#. type: Title =====
#: upstream/_guides/resteasy-reactive.adoc:1193
#, fuzzy, no-wrap
msgid "Customize the JAXB configuration"
msgstr "JAXB設定のカスタマイズ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1196
#, fuzzy
msgid "To customize the JAXB configuration for either the JAXB context, and/or the Marshaller/Unmarshaller components, the suggested approach is to define a CDI bean of type `io.quarkus.jaxb.runtime.JaxbContextCustomizer`."
msgstr "JAXB コンテキストやマーシャラー/アンマーシャラーコンポーネントの JAXB 設定をカスタマイズするには、 `io.quarkus.jaxb.runtime.JaxbContextCustomizer` 型の CDI Bean を定義する方法が推奨されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1198
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "カスタムモジュールを登録する必要がある場合の例は次のようになります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1203
#, fuzzy, no-wrap
msgid ""
"@Singleton\n"
"public class RegisterCustomModuleCustomizer implements JaxbContextCustomizer {\n"
msgstr ""
"@Provider\n"
"public class LoggingFilter implements ContainerRequestFilter {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1207
#, no-wrap
msgid ""
"    // For JAXB context configuration\n"
"    @Override\n"
"    public void customizeContextProperties(Map<String, Object> properties) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1209
#, fuzzy, no-wrap
msgid "    }\n"
msgstr ""
"    // ...\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1215
#, no-wrap
msgid ""
"    // For Marshaller configuration\n"
"    @Override\n"
"    public void customizeMarshaller(Marshaller marshaller) throws PropertyException {\n"
"        marshaller.setProperty(\"jaxb.formatted.output\", Boolean.TRUE);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1222
#, no-wrap
msgid ""
"    // For Unmarshaller configuration\n"
"    @Override\n"
"    public void customizeUnmarshaller(Unmarshaller unmarshaller) throws PropertyException {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1227
#, fuzzy
msgid "It's not necessary to implement all three methods, but only the want you need."
msgstr "3つのメソッドすべてを実装する必要はなく、必要なものだけを実装すればよいのです。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1230
#, fuzzy
msgid "Alternatively, you can provide your own `JAXBContext` bean by doing:"
msgstr "また、 `JAXBContext` ビーンを自分で用意することもできます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1234
#, fuzzy, no-wrap
msgid "public class CustomJaxbContext {\n"
msgstr "public class FormData {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1242
#, no-wrap
msgid ""
"    // Replaces the CDI producer for JAXBContext built into Quarkus\n"
"    @Singleton\n"
"    @Produces\n"
"    JAXBContext jaxbContext() {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1247
msgid "Note that if you provide your custom JAXB context instance, you will need to register the classes you want to use for the XML serialization. This means that Quarkus will not update your custom JAXB context instance with the auto-discovered classes."
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1249
#, no-wrap
msgid "Web Links support"
msgstr "Web リンクのサポート"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1254
msgid "To enable Web Links support, add the `quarkus-resteasy-reactive-links` extension to your project."
msgstr "Web リンクのサポートを有効にするには、プロジェクトに `quarkus-resteasy-reactive-links` エクステンションを追加します。"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1260
#, no-wrap
msgid "`io.quarkus:quarkus-resteasy-reactive-links`"
msgstr "`io.quarkus:quarkus-resteasy-reactive-links`"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1262
#, no-wrap
msgid "https://www.w3.org/wiki/LinkHeader[Web Links support]"
msgstr "https://www.w3.org/wiki/LinkHeader[Web Links support]"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1265
msgid "Importing this module will allow injecting web links into the response HTTP headers by just annotating your endpoint resources with the `@InjectRestLinks` annotation. To declare the web links that will be returned, you need to use the `@RestLink` annotation in the linked methods. An example of this could look like:"
msgstr "このモジュールをインポートすると、エンドポイントリソースに `@InjectRestLinks` アノテーションを付けるだけで、レスポンスの HTTP ヘッダに Web リンクを挿入することができるようになります。返される Web リンクを宣言するには、リンクされたメソッドで `@RestLink` アノテーションを使用する必要があります。この例としては、以下のようなものがあります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1270
#: upstream/_guides/resteasy-reactive.adoc:1332
#: upstream/_guides/resteasy-reactive.adoc:1363
#: upstream/_guides/resteasy-reactive.adoc:1455
#, no-wrap
msgid ""
"@Path(\"/records\")\n"
"public class RecordsResource {\n"
msgstr ""
"@Path(\"/records\")\n"
"public class RecordsResource {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1277
#, no-wrap
msgid ""
"    @GET\n"
"    @RestLink(rel = \"list\")\n"
"    @InjectRestLinks\n"
"    public List<Record> getAll() {\n"
"        // ...\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @RestLink(rel = \"list\")\n"
"    @InjectRestLinks\n"
"    public List<Record> getAll() {\n"
"        // ...\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1285
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    @RestLink(rel = \"self\")\n"
"    @InjectRestLinks(RestLinkType.INSTANCE)\n"
"    public TestRecord get(@PathParam(\"id\") int id) {\n"
"        // ...\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    @RestLink(rel = \"self\")\n"
"    @InjectRestLinks(RestLinkType.INSTANCE)\n"
"    public TestRecord get(@PathParam(\"id\") int id) {\n"
"        // ...\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1293
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    @RestLink\n"
"    @InjectRestLinks(RestLinkType.INSTANCE)\n"
"    public TestRecord update(@PathParam(\"id\") int id) {\n"
"        // ...\n"
"    }\n"
msgstr ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    @RestLink\n"
"    @InjectRestLinks(RestLinkType.INSTANCE)\n"
"    public TestRecord update(@PathParam(\"id\") int id) {\n"
"        // ...\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1301
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    @RestLink\n"
"    public TestRecord delete(@PathParam(\"id\") int id) {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    @RestLink\n"
"    public TestRecord delete(@PathParam(\"id\") int id) {\n"
"        // ...\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1304
msgid "When calling the endpoint `/records` which is defined by the method `getAll` within the above resource using curl, you would get the web links header:"
msgstr "上記のリソース内でメソッド `getAll` によって定義されたエンドポイント `/records` を curl を使用して呼び出すと、Web リンクヘッダーが取得されます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1309
#, no-wrap
msgid ""
"& curl -i localhost:8080/records\n"
"Link: <http://localhost:8080/records>; rel=\"list\"\n"
msgstr ""
"& curl -i localhost:8080/records\n"
"Link: <http://localhost:8080/records>; rel=\"list\"\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1312
msgid "As this resource does not return a single instance of type `Record`, the links for the methods `get`, `update`, and `delete` are not injected. Now, when calling the endpoint `/records/1`, you would get the following web links:"
msgstr "このリソースはタイプ `Record` の単一のインスタンスを返さないため、メソッド `get`、`update`、および `delete` のリンクは挿入されません。これで、エンドポイント `/records/1` を呼び出すと、次の Web リンクが表示されます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1320
#, no-wrap
msgid ""
"& curl -i localhost:8080/records/1\n"
"Link: <http://localhost:8080/records>; rel=\"list\"\n"
"Link: <http://localhost:8080/records/1>; rel=\"self\"\n"
"Link: <http://localhost:8080/records/1>; rel=\"update\"\n"
"Link: <http://localhost:8080/records/1>; rel=\"delete\"\n"
msgstr ""
"& curl -i localhost:8080/records/1\n"
"Link: <http://localhost:8080/records>; rel=\"list\"\n"
"Link: <http://localhost:8080/records/1>; rel=\"self\"\n"
"Link: <http://localhost:8080/records/1>; rel=\"update\"\n"
"Link: <http://localhost:8080/records/1>; rel=\"delete\"\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1323
msgid "Finally, when calling the delete resource, you should not see any web links as the method `delete` is not annotated with the `@InjectRestLinks` annotation."
msgstr "最後に、delete リソースを呼び出すとき、メソッド `delete` には `@InjectRestLinks` アノテーションが付けられていないため、Web リンクは表示されません。"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:1324
#, no-wrap
msgid "Programmatically access to the web links registry"
msgstr "Web リンクレジストリーへのプログラムによるアクセス"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1327
msgid "You can programmatically have access to the web links registry just by injecting the `RestLinksProvider` bean:"
msgstr "`RestLinksProvider` Bean を挿入するだけで、プログラムで Web リンクレジストリーにアクセスできます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1335
#: upstream/_guides/resteasy-reactive.adoc:1458
#, no-wrap
msgid ""
"    @Inject\n"
"    RestLinksProvider linksProvider;\n"
msgstr ""
"    @Inject\n"
"    RestLinksProvider linksProvider;\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1341
msgid "Using this injected bean of type `RestLinksProvider`, you can get the links by type using the method `RestLinksProvider.getTypeLinks` or get the links by a concrete instance using the method `RestLinksProvider.getInstanceLinks`."
msgstr "タイプ `RestLinksProvider` の挿入された Bean を使用すると、メソッド `RestLinksProvider.getTypeLinks` を使用してタイプごとにリンクを取得するか、メソッド `RestLinksProvider.getInstanceLinks` を使用して具象インスタンスによってリンクを取得できます。"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:1342
#, no-wrap
msgid "JSON Hypertext Application Language (HAL) support"
msgstr "JSON ハイパーテキストアプリケーション言語 (HAL) のサポート"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1345
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] 標準は、Web リンクを表す単純な形式です。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1347
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-resteasy-reactive-jsonb` or the `quarkus-resteasy-reactive-jackson` extension."
msgstr "HAL サポートを有効にするには、プロジェクトに `quarkus-hal` エクステンションを追加します。また、HAL には JSON サポートが必要なため、`quarkus-resteasy-reactive-jsonb` または `quarkus-resteasy-reactive-jackson` エクステンションを追加する必要があります。"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1353
#, no-wrap
msgid "`io.quarkus:quarkus-hal`"
msgstr "`io.quarkus:quarkus-hal`"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1355
#, no-wrap
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1358
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr "エクステンションを追加した後、REST リソースにアノテーションを付けて、メディアタイプ `application/hal+json` を生成できます (または RestMediaType.APPLICATION_HAL_JSON を使用します)。例えば:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1371
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, RestMediaType.APPLICATION_HAL_JSON })\n"
"    @RestLink(rel = \"list\")\n"
"    @InjectRestLinks\n"
"    public List<Record> getAll() {\n"
"        // ...\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, RestMediaType.APPLICATION_HAL_JSON })\n"
"    @RestLink(rel = \"list\")\n"
"    @InjectRestLinks\n"
"    public List<Record> getAll() {\n"
"        // ...\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1381
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, RestMediaType.APPLICATION_HAL_JSON })\n"
"    @Path(\"/{id}\")\n"
"    @RestLink(rel = \"self\")\n"
"    @InjectRestLinks(RestLinkType.INSTANCE)\n"
"    public TestRecord get(@PathParam(\"id\") int id) {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, RestMediaType.APPLICATION_HAL_JSON })\n"
"    @Path(\"/{id}\")\n"
"    @RestLink(rel = \"self\")\n"
"    @InjectRestLinks(RestLinkType.INSTANCE)\n"
"    public TestRecord get(@PathParam(\"id\") int id) {\n"
"        // ...\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1384
msgid "Now, the endpoints `/records` and `/records/{id}` will accept the media type both `json` and `hal+json` to print the records in Hal format."
msgstr "ここで、エンドポイント `/records` と `/records/{id}` は、`json` と `hal + json` の両方のメディアタイプを受け入れて、Hal 形式でレコードを出力します。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1386
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr "たとえば、curl を使用して `/records` エンドポイントを呼び出してレコードのリストを返す場合、HAL 形式は次のようになります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1427
#, no-wrap
msgid ""
"& curl -H \"Accept:application/hal+json\" -i localhost:8080/records\n"
"{\n"
"    \"_embedded\": {\n"
"        \"items\": [\n"
"            {\n"
"                \"id\": 1,\n"
"                \"slug\": \"first\",\n"
"                \"value\": \"First value\",\n"
"                \"_links\": {\n"
"                    \"self\": {\n"
"                        \"href\": \"http://localhost:8081/records/1\"\n"
"                    },\n"
"                    \"list\": {\n"
"                        \"href\": \"http://localhost:8081/records\"\n"
"                    }\n"
"                }\n"
"            },\n"
"            {\n"
"                \"id\": 2,\n"
"                \"slug\": \"second\",\n"
"                \"value\": \"Second value\",\n"
"                \"_links\": {\n"
"                    \"self\": {\n"
"                        \"href\": \"http://localhost:8081/records/2\"\n"
"                    },\n"
"                    \"list\": {\n"
"                        \"href\": \"http://localhost:8081/records\"\n"
"                    }\n"
"                }\n"
"            }\n"
"        ]\n"
"    },\n"
"    \"_links\": {\n"
"        \"list\": {\n"
"            \"href\": \"http://localhost:8081/records\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
"& curl -H \"Accept:application/hal+json\" -i localhost:8080/records\n"
"{\n"
"    \"_embedded\": {\n"
"        \"items\": [\n"
"            {\n"
"                \"id\": 1,\n"
"                \"slug\": \"first\",\n"
"                \"value\": \"First value\",\n"
"                \"_links\": {\n"
"                    \"self\": {\n"
"                        \"href\": \"http://localhost:8081/records/1\"\n"
"                    },\n"
"                    \"list\": {\n"
"                        \"href\": \"http://localhost:8081/records\"\n"
"                    }\n"
"                }\n"
"            },\n"
"            {\n"
"                \"id\": 2,\n"
"                \"slug\": \"second\",\n"
"                \"value\": \"Second value\",\n"
"                \"_links\": {\n"
"                    \"self\": {\n"
"                        \"href\": \"http://localhost:8081/records/2\"\n"
"                    },\n"
"                    \"list\": {\n"
"                        \"href\": \"http://localhost:8081/records\"\n"
"                    }\n"
"                }\n"
"            }\n"
"        ]\n"
"    },\n"
"    \"_links\": {\n"
"        \"list\": {\n"
"            \"href\": \"http://localhost:8081/records\"\n"
"        }\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1430
msgid "When we call a resource `/records/1` that returns only one instance, then the output is:"
msgstr "1 つのインスタンスのみを返すリソース `/records/1` を呼び出すと、出力は次のようになります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1447
#, no-wrap
msgid ""
"& curl -H \"Accept:application/hal+json\" -i localhost:8080/records/1\n"
"{\n"
"    \"id\": 1,\n"
"    \"slug\": \"first\",\n"
"    \"value\": \"First value\",\n"
"    \"_links\": {\n"
"        \"self\": {\n"
"            \"href\": \"http://localhost:8081/records/1\"\n"
"        },\n"
"        \"list\": {\n"
"            \"href\": \"http://localhost:8081/records\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
"& curl -H \"Accept:application/hal+json\" -i localhost:8080/records/1\n"
"{\n"
"    \"id\": 1,\n"
"    \"slug\": \"first\",\n"
"    \"value\": \"First value\",\n"
"    \"_links\": {\n"
"        \"self\": {\n"
"            \"href\": \"http://localhost:8081/records/1\"\n"
"        },\n"
"        \"list\": {\n"
"            \"href\": \"http://localhost:8081/records\"\n"
"        }\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1450
msgid "Finally, you can also provide additional HAL links programmatically in your resource just by returning either `HalCollectionWrapper` (to return a list of entities) or `HalEntityWrapper` (to return a single object) as described in the following example:"
msgstr "Finally, you can also provide additional HAL links programmatically in your resource just by returning either `HalCollectionWrapper` (to return a list of entities) or `HalEntityWrapper` (to return a single object) as described in the following example:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1468
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, RestMediaType.APPLICATION_HAL_JSON })\n"
"    @RestLink(rel = \"list\")\n"
"    public HalCollectionWrapper getAll() {\n"
"        List<Record> list = // ...\n"
"        HalCollectionWrapper halCollection = new HalCollectionWrapper(list, \"collectionName\", linksProvider.getTypeLinks(Record.class));\n"
"        halCollection.addLinks(Link.fromPath(\"/records/1\").rel(\"first-record\").build());\n"
"        return halCollection;\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, RestMediaType.APPLICATION_HAL_JSON })\n"
"    @RestLink(rel = \"list\")\n"
"    public HalCollectionWrapper getAll() {\n"
"        List<Record> list = // ...\n"
"        HalCollectionWrapper halCollection = new HalCollectionWrapper(list, \"collectionName\", linksProvider.getTypeLinks(Record.class));\n"
"        halCollection.addLinks(Link.fromPath(\"/records/1\").rel(\"first-record\").build());\n"
"        return halCollection;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1481
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, RestMediaType.APPLICATION_HAL_JSON })\n"
"    @Path(\"/{id}\")\n"
"    @RestLink(rel = \"self\")\n"
"    @InjectRestLinks(RestLinkType.INSTANCE)\n"
"    public HalEntityWrapper get(@PathParam(\"id\") int id) {\n"
"        Record entity = // ...\n"
"        HalEntityWrapper halEntity = new HalEntityWrapper(entity, linksProvider.getInstanceLinks(entity));\n"
"        halEntity.addLinks(Link.fromPath(\"/records/1/parent\").rel(\"parent-record\").build());\n"
"        return halEntity;\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, RestMediaType.APPLICATION_HAL_JSON })\n"
"    @Path(\"/{id}\")\n"
"    @RestLink(rel = \"self\")\n"
"    @InjectRestLinks(RestLinkType.INSTANCE)\n"
"    public HalEntityWrapper get(@PathParam(\"id\") int id) {\n"
"        Record entity = // ... \n"
"        HalEntityWrapper halEntity = new HalEntityWrapper(entity, linksProvider.getInstanceLinks(entity));\n"
"        halEntity.addLinks(Link.fromPath(\"/records/1/parent\").rel(\"parent-record\").build());\n"
"        return halEntity;\n"
"    }\n"
"}\n"

#. type: Title ==
#: upstream/_guides/resteasy-reactive.adoc:1483
#, no-wrap
msgid "CORS filter"
msgstr "CORS フィルター"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1488
msgid "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served."
msgstr "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[クロスオリジンリソース共有] (CORS)は、ウェブページ上の制限されたリソースを、最初のリソースが提供されたドメイン以外の別のドメインから要求できるようにするメカニズムです。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1492
msgid "Quarkus comes with a CORS filter at the HTTP layer level.  Read the xref:http-reference.adoc#cors-filter[HTTP Reference Documentation] to learn how to use it."
msgstr "Quarkus には、HTTP レイヤーレベルの CORS フィルターが付属しています。使用方法については、xref:http-reference.adoc#cors-filter[HTTPリファレンスドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_guides/resteasy-reactive.adoc:1493
#, no-wrap
msgid "More advanced usage"
msgstr "より高度な使用法"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1497
msgid "Here are some more advanced topics that you may not need to know about initially, but could prove useful for more complex use cases."
msgstr "ここでは、最初は知る必要がないかもしれませんが、より複雑なユースケースに役立つ可能性のある、より詳細なトピックをいくつか紹介します。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1498
#, no-wrap
msgid "Execution model, blocking, non-blocking"
msgstr "実行モデル、ブロッキング、非ブロッキング"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1503
msgid "RESTEasy Reactive is implemented using two main thread types:"
msgstr "RESTEasy Reactive は、次の 2 つのメインスレッドタイプを使用して実装されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1505
msgid "Event-loop threads: which are responsible, among other things, for reading bytes from the HTTP request and"
msgstr "イベントループスレッド: 特に、HTTP リクエストからバイトを読み取る役割を果たします。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1506
msgid "writing bytes back to the HTTP response"
msgstr "HTTP レスポンスにバイトを書き戻す"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1507
msgid "Worker threads: they are pooled and can be used to offload long-running operations"
msgstr "ワーカースレッド: プールされ、長時間実行される操作の負荷を軽減するために使用できます"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1511
msgid "The event-loop threads (also called IO threads) are responsible for actually performing all the IO operations in an asynchronous way, and to trigger any listener interested in the completion of those IO operations."
msgstr "イベントループスレッド (IO スレッドとも呼ばれます) は、すべての IO 操作を非同期で実際に実行し、それらの IO 操作の完了に関心のあるリスナーをトリガーする役割を果たします。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1515
msgid "By default, the thread RESTEasy Reactive will run endpoint methods on depends on the signature of the method.  If a method returns one of the following types then it is considered non-blocking, and will be run on the IO thread by default:"
msgstr "デフォルトでは、スレッド RESTEasy Reactive は、メソッドのシグネチャーに応じてエンドポイントメソッドを実行します。メソッドが次のタイプのいずれかを返す場合、それは非ブロッキングと見なされ、デフォルトで IO スレッドで実行されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1517
msgid "`io.smallrye.mutiny.Uni`"
msgstr "`io.smallrye.mutiny.Uni`"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1518
msgid "`io.smallrye.mutiny.Multi`"
msgstr "`io.smallrye.mutiny.Multi`"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1519
msgid "`java.util.concurrent.CompletionStage`"
msgstr "`java.util.concurrent.CompletionStage`"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1520
msgid "`org.reactivestreams.Publisher`"
msgstr "`org.reactivestreams.Publisher`"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1521
msgid "Kotlin `suspended` methods"
msgstr "Kotlin の `suspended` メソッド"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1526
#, fuzzy
msgid "This 'best guess' approach means that the majority of operations will run on the correct thread by default. If you are writing reactive code then your method will generally return one of these types, and will be executed on the IO thread.  If you are writing blocking code your methods will usually return the result directly, and these will be run on a worker thread."
msgstr "この最良の推測アプローチは、操作の大部分がデフォルトで正しいスレッドで実行されることを意味します。リアクティブコードを記述している場合、メソッドは通常、これらのタイプの 1 つを返し、IO スレッドで実行されます。ブロッキングコードを記述している場合、メソッドは通常、結果を直接返し、これらはワーカースレッドで実行されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1532
msgid "You can override this behaviour using the https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/Blocking.html[`@Blocking`] and https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/NonBlocking.html[`@NonBlocking`] annotations. This can be applied at the method, class or `javax.ws.rs.core.Application` level."
msgstr "https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/Blocking.html[`@Blocking`] アノテーションと https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/NonBlocking.html[`@NonBlocking`] アノテーションを使用してこの動作をオーバーライドできます。これは、メソッド、クラス、または `javax.ws.rs.core.Application` レベルで適用できます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1534
msgid "The example below will override the default behaviour and always run on a worker thread, even though it returns a `Uni`."
msgstr "以下の例は、デフォルトの動作をオーバーライドし、`Uni` を返しても、常にワーカースレッドで実行されます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1543
#, no-wrap
msgid "import io.smallrye.common.annotation.Blocking;\n"
msgstr "import io.smallrye.common.annotation.Blocking;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1546
#: upstream/_guides/resteasy-reactive.adoc:1574
#, no-wrap
msgid ""
"@Path(\"yawn\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"yawn\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1555
#, no-wrap
msgid ""
"    @Blocking\n"
"    @GET\n"
"    public Uni<String> blockingHello() throws InterruptedException {\n"
"        // do a blocking operation\n"
"        Thread.sleep(1000);\n"
"        return Uni.createFrom().item(\"Yaaaawwwwnnnnnn…\");\n"
"    }\n"
"}\n"
msgstr ""
"    @Blocking\n"
"    @GET\n"
"    public Uni<String> blockingHello() throws InterruptedException {\n"
"        // do a blocking operation\n"
"        Thread.sleep(1000);\n"
"        return Uni.createFrom().item(\"Yaaaawwwwnnnnnn…\");\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1560
#, fuzzy
msgid "Most of the time, there are ways to achieve the same blocking operations in an asynchronous/reactive way, using https://smallrye.io/smallrye-mutiny/[Mutiny], https://hibernate.org/reactive/[Hibernate Reactive] or any of the xref:quarkus-reactive-architecture.adoc#quarkus-extensions-enabling-reactive[Quarkus Reactive extensions] for example:"
msgstr "ほとんどの場合、 https://smallrye.io/smallrye-mutiny/[Mutiny] 、 http://hibernate.org/reactive/[Hibernate Reactive] 、または xref:quarkus-reactive-architecture.adoc#quarkus-extensions-enabling-reactive[Quarkusリアクティブエクステンション] などを使って、同じブロック操作を非同期/リアクティブに実現する方法があります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1566
#, no-wrap
msgid "import java.time.Duration;\n"
msgstr "import java.time.Duration;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1582
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<String> blockingHello() throws InterruptedException {\n"
"        return Uni.createFrom().item(\"Yaaaawwwwnnnnnn…\")\n"
"                // do a non-blocking sleep\n"
"                .onItem().delayIt().by(Duration.ofSeconds(2));\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public Uni<String> blockingHello() throws InterruptedException {\n"
"        return Uni.createFrom().item(\"Yaaaawwwwnnnnnn…\")\n"
"                // do a non-blocking sleep\n"
"                .onItem().delayIt().by(Duration.ofSeconds(2));\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1587
msgid "If a method or class is annotated with `javax.transaction.Transactional` then it will also be treated as a blocking method. This is because JTA is a blocking technology, and is generally used with other blocking technology such as Hibernate and JDBC. An explicit `@Blocking` or `@NonBlocking` on the class will override this behaviour."
msgstr "メソッドまたはクラスに `javax.transaction.Transactional` アノテーションが付けられている場合、それもブロッキングメソッドとして扱われます。これは、JTA がブロッキングテクノロジーであり、Hibernate や JDBC などの他のブロッキングテクノロジーで一般的に使用されているためです。クラスでの明示的な `@Blocking` または `@NonBlocking` は、この動作をオーバーライドします。"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:1588
#, no-wrap
msgid "Overriding the default behaviour"
msgstr "デフォルトの動作のオーバーライド"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1592
msgid "If you want to override the default behaviour you can annotate a `javax.ws.rs.core.Application` subclass in your application with `@Blocking` or `@NonBlocking`, and this will set the default for every method that does not have an explicit annotation."
msgstr "デフォルトの動作をオーバーライドする場合は、アプリケーションの `javax.ws.rs.core.Application` サブクラスに `@Blocking` または `@NonBlocking` のアノテーションを付けることができます。これにより、明示的なアノテーションを付与していないすべてのメソッドのデフォルトが設定されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1595
msgid "Behaviour can still be overridden on a class or method level by annotating them directly, however all endpoints without an annotation will now follow the default, no matter their method signature."
msgstr "動作は、クラスまたはメソッドレベルで直接アノテーションを付けることでオーバーライドできますが、アノテーションのないすべてのエンドポイントは、メソッドのシグネチャーに関係なく、デフォルトに従うようになります。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1597
#, no-wrap
msgid "Exception mapping"
msgstr "例外のマッピング"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1602
msgid "If your application needs to return non-nominal HTTP codes in error cases, the best is to throw exceptions that will result in the proper HTTP response being sent by the framework using link:{jaxrsapi}/javax/ws/rs/WebApplicationException.html[`WebApplicationException`] or any of its subtypes:"
msgstr "もしアプリケーションがエラー時に正規の HTTP コード以外を返す必要がある場合、最善の方法は、フレームワークが link:{jaxrsapi}/javax/ws/rs/WebApplicationException.html[`WebApplicationException`] またはそのサブタイプを使用して適切な HTTP レスポンスを送信する結果となる例外を投げることです。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1611
#, no-wrap
msgid ""
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.NotFoundException;\n"
"import javax.ws.rs.Path;\n"
msgstr ""
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.NotFoundException;\n"
"import javax.ws.rs.Path;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1614
#: upstream/_guides/resteasy-reactive.adoc:1676
#, no-wrap
msgid ""
"@Path(\"cheeses/{cheese}\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"cheeses/{cheese}\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1626
#, no-wrap
msgid ""
"    @GET\n"
"    public String findCheese(String cheese) {\n"
"        if(cheese == null)\n"
"            // send a 400\n"
"            throw new BadRequestException();\n"
"        if(!cheese.equals(\"camembert\"))\n"
"            // send a 404\n"
"            throw new NotFoundException(\"Unknown cheese: \" + cheese);\n"
"        return \"Camembert is a very nice cheese\";\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public String findCheese(String cheese) {\n"
"        if(cheese == null)\n"
"            // send a 400\n"
"            throw new BadRequestException();\n"
"        if(!cheese.equals(\"camembert\"))\n"
"            // send a 404\n"
"            throw new NotFoundException(\"Unknown cheese: \" + cheese);\n"
"        return \"Camembert is a very nice cheese\";\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1635
msgid "If your endpoint method is delegating calls to another service layer which does not know of JAX-RS, you need a way to turn service exceptions to an HTTP response, and you can do that using the link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerExceptionMapper.html[`@ServerExceptionMapper`] annotation on a method, with one parameter of the exception type you want to handle, and turning that exception into a link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] (or a link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`]):"
msgstr "エンドポイントメソッドが JAX-RS を認識しない別のサービスレイヤーに呼び出しを委任している場合は、サービス例外を HTTP レスポンスに変換する方法が必要であり、メソッドに link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerExceptionMapper.html[`@ServerExceptionMapper`] を使用してこれを行うことができます。例外マッパーは処理する例外タイプのパラメーターが 1 つあり、その例外を link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] (あるいは link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`]) に変換します。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1641
#, no-wrap
msgid "import java.util.Map;\n"
msgstr "import java.util.Map;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1648
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Response;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1651
#: upstream/_guides/resteasy-reactive.adoc:1705
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.server.ServerExceptionMapper;\n"
"import org.jboss.resteasy.reactive.RestResponse;\n"
msgstr ""
"import org.jboss.resteasy.reactive.server.ServerExceptionMapper;\n"
"import org.jboss.resteasy.reactive.RestResponse;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1654
#, no-wrap
msgid ""
"class UnknownCheeseException extends RuntimeException {\n"
"    public final String name;\n"
msgstr ""
"class UnknownCheeseException extends RuntimeException {\n"
"    public final String name;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1659
#, no-wrap
msgid ""
"    public UnknownCheeseException(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""
"    public UnknownCheeseException(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1665
#, fuzzy, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CheeseService {\n"
"    private static final Map<String, String> cheeses =\n"
"            Map.of(\"camembert\", \"Camembert is a very nice cheese\",\n"
"                   \"gouda\", \"Gouda is acceptable too, especially with cumin\");\n"
msgstr ""
"@ApplicationScoped\n"
"class CheeseService {\n"
"    private static final Map<String, String> cheeses = \n"
"            Map.of(\"camembert\", \"Camembert is a very nice cheese\",\n"
"                   \"gouda\", \"Gouda is acceptable too, especially with cumin\");\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1673
#, no-wrap
msgid ""
"    public String findCheese(String name) {\n"
"        String ret = cheeses.get(name);\n"
"        if(ret != null)\n"
"            return ret;\n"
"        throw new UnknownCheeseException(name);\n"
"    }\n"
"}\n"
msgstr ""
"    public String findCheese(String name) {\n"
"        String ret = cheeses.get(name);\n"
"        if(ret != null)\n"
"            return ret;\n"
"        throw new UnknownCheeseException(name);\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1679
#, no-wrap
msgid ""
"    @Inject\n"
"    CheeseService cheeses;\n"
msgstr ""
"    @Inject\n"
"    CheeseService cheeses;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1684
#, no-wrap
msgid ""
"    @ServerExceptionMapper\n"
"    public RestResponse<String> mapException(UnknownCheeseException x) {\n"
"        return RestResponse.status(Response.Status.NOT_FOUND, \"Unknown cheese: \" + x.name);\n"
"    }\n"
msgstr ""
"    @ServerExceptionMapper\n"
"    public RestResponse<String> mapException(UnknownCheeseException x) {\n"
"        return RestResponse.status(Response.Status.NOT_FOUND, \"Unknown cheese: \" + x.name);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1693
#, fuzzy, no-wrap
msgid ""
"    @GET\n"
"    public String findCheese(String cheese) {\n"
"        if(cheese == null)\n"
"            // send a 400\n"
"            throw new BadRequestException();\n"
"        return cheeses.findCheese(cheese);\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    public String findCheese(String cheese) {\n"
"        if(cheese == null)\n"
"            // send a 400\n"
"            throw new BadRequestException();\n"
"        return cheeses.findCheese(cheese);\n"
"    }\n"
"} \n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1698
msgid "exception mappers defined in REST endpoint classes will only be called if the exception is thrown in the same class. If you want to define global exception mappers, simply define them outside a REST endpoint class:"
msgstr "REST エンドポイントクラスで定義された例外マッパーは、例外が同じクラスで出力された場合にのみ呼び出されます。グローバル例外マッパーを定義する場合は、REST エンドポイントクラスの外部で定義するだけです。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1712
#, no-wrap
msgid ""
"class ExceptionMappers {\n"
"    @ServerExceptionMapper\n"
"    public RestResponse<String> mapException(UnknownCheeseException x) {\n"
"        return RestResponse.status(Response.Status.NOT_FOUND, \"Unknown cheese: \" + x.name);\n"
"    }\n"
"}\n"
msgstr ""
"class ExceptionMappers {\n"
"    @ServerExceptionMapper\n"
"    public RestResponse<String> mapException(UnknownCheeseException x) {\n"
"        return RestResponse.status(Response.Status.NOT_FOUND, \"Unknown cheese: \" + x.name);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1715
msgid "You can also declare link:{jaxrsspec}#exceptionmapper[exception mappers in the JAX-RS way]."
msgstr "link:{jaxrsspec}#exceptionmapper[JAX-RSの方式で例外マッパー] を宣言することもできます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1717
msgid "Your exception mapper may declare any of the following parameter types:"
msgstr "例外マッパーは、次のパラメータータイプのいずれかを宣言できます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:1718
#, no-wrap
msgid "Table Exception mapper parameters"
msgstr "テーブル例外マッパーパラメーター"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1723
#, no-wrap
msgid "An exception type"
msgstr "例外タイプ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1725
#, no-wrap
msgid "Defines the exception type you want to handle"
msgstr "処理する例外タイプを定義します"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1726
#: upstream/_guides/resteasy-reactive.adoc:1840
#, no-wrap
msgid "Any of the <<context-objects,Context objects>>"
msgstr "<<context-objects,Context objects>>> のいずれか"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1729
#: upstream/_guides/resteasy-reactive.adoc:1843
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/container/ContainerRequestContext.html[`ContainerRequestContext`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/container/ContainerRequestContext.html[`ContainerRequestContext`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1731
#: upstream/_guides/resteasy-reactive.adoc:1845
#, no-wrap
msgid "A context object to access the current request"
msgstr "現在のリクエストにアクセスするためのコンテキストオブジェクト"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1734
#: upstream/_guides/resteasy-reactive.adoc:1854
msgid "It may declare any of the following return types:"
msgstr "次の戻り値の型のいずれかを宣言できます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:1735
#, no-wrap
msgid "Table Exception mapper return types"
msgstr "テーブル 例外マッパーの戻り値の型"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1740
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] or link:{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] または link:{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1742
#, no-wrap
msgid "The response to send to the client when the exception occurs"
msgstr "例外が発生したときにクライアントに送信するレスポンス"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1743
#, no-wrap
msgid "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse>`] or link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"
msgstr "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse>`] または link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1745
#, no-wrap
msgid "An asynchronous response to send to the client when the exception occurs"
msgstr "例外が発生したときにクライアントに送信する非同期レスポンス"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1752
msgid "When an exception occurs, RESTEasy Reactive does not log it by default (for security reasons).  This can sometimes make it hard to understand why certain exception handling code was invoked (or not invoked).  To make RESTEasy Reactive log the actual exception before an exception mapping code is run the `org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext` log category can be set to `DEBUG` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1756
#, no-wrap
msgid "quarkus.log.category.\"org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext\".level=DEBUG\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1759
#, no-wrap
msgid "Request or response filters"
msgstr "リクエストまたはレスポンスフィルター"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:1761
#, no-wrap
msgid "Via annotations"
msgstr "アノテーション経由"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1764
msgid "You can declare functions which are invoked in the following phases of the request processing:"
msgstr "リクエスト処理の次のフェーズで呼び出される関数を宣言できます。"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1766
msgid "Before the endpoint method is identified: pre-routing request filter"
msgstr "エンドポイントメソッドが識別される前: 事前ルーティングリクエストフィルター"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1767
msgid "After routing, but before the endpoint method is called: normal request filter"
msgstr "ルーティング後、エンドポイントメソッドが呼び出される前: 通常のリクエストフィルター"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1768
msgid "After the endpoint method is called: response filter"
msgstr "エンドポイントメソッドが呼び出された後: レスポンスフィルター"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1772
msgid "These filters allow you to do various things such as examine the request URI, HTTP method, influence routing, look or change request headers, abort the request, or modify the response."
msgstr "これらのフィルターを使用すると、リクエスト URI、HTTP メソッドの調査、ルーティングへの影響、リクエストヘッダーの検索または変更、リクエストの中止、レスポンスの変更など、さまざまなことができます。"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1776
msgid "Request filters can be declared with the link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerRequestFilter.html[`@ServerRequestFilter`] annotation:"
msgstr "リクエストフィルターは、 link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerRequestFilter.html[`@ServerRequestFilter`] アノテーションで宣言することが出来ます:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1780
#, no-wrap
msgid "import java.util.Optional;\n"
msgstr "import java.util.Optional;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1782
#, no-wrap
msgid "class Filters {\n"
msgstr "class Filters {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1790
#, no-wrap
msgid ""
"    @ServerRequestFilter(preMatching = true)\n"
"    public void preMatchingFilter(ContainerRequestContext requestContext) {\n"
"        // make sure we don't lose cheese lovers\n"
"        if(\"yes\".equals(requestContext.getHeaderString(\"Cheese\"))) {\n"
"            requestContext.setRequestUri(URI.create(\"/cheese\"));\n"
"        }\n"
"    }\n"
msgstr ""
"    @ServerRequestFilter(preMatching = true)\n"
"    public void preMatchingFilter(ContainerRequestContext requestContext) {\n"
"        // make sure we don't lose cheese lovers\n"
"        if(\"yes\".equals(requestContext.getHeaderString(\"Cheese\"))) {\n"
"            requestContext.setRequestUri(URI.create(\"/cheese\"));\n"
"        }\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1800
#, no-wrap
msgid ""
"    @ServerRequestFilter\n"
"    public Optional<RestResponse<Void>> getFilter(ContainerRequestContext ctx) {\n"
"        // only allow GET methods for now\n"
"        if(ctx.getMethod().equals(HttpMethod.GET)) {\n"
"            return Optional.of(RestResponse.status(Response.Status.METHOD_NOT_ALLOWED));\n"
"        }\n"
"        return Optional.empty();\n"
"    }\n"
"}\n"
msgstr ""
"    @ServerRequestFilter\n"
"    public Optional<RestResponse<Void>> getFilter(ContainerRequestContext ctx) {\n"
"        // only allow GET methods for now\n"
"        if(ctx.getMethod().equals(HttpMethod.GET)) {\n"
"            return Optional.of(RestResponse.status(Response.Status.METHOD_NOT_ALLOWED));\n"
"        }\n"
"        return Optional.empty();\n"
"    }\n"
"}\n"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1809
msgid "Request filters are usually executed on the same thread that the method that handles the request will be executed.  That means that if the method servicing the request is annotated with `@Blocking`, then the filters will also be run on the worker thread.  If the method is annotated with `@NonBlocking` (or is not annotated at all), then the filters will also be run on the same event-loop thread."
msgstr "リクエストフィルターは通常、リクエストを処理するメソッドが実行されるのと同じスレッドで実行されます。つまり、リクエストを処理するメソッドが `@Blocking` でアノテーションされている場合は、フィルターもワーカスレッドで実行されます。メソッドに `@NonBlocking` のアノテーションがある場合 (あるいは全くアノテーションがない場合)、フィルターは同じイベントループのスレッドで実行されます。"

#. type: delimited block =
#: upstream/_guides/resteasy-reactive.adoc:1813
msgid "If however a filter needs to be run on the event-loop despite the fact that the method servicing the request will be run on a worker thread, then `@ServerRequestFilter(nonBlocking=true)` can be used.  Note however, that these filters need to be run before **any** filter that does not use that setting and would run on a worker thread."
msgstr "しかし、リクエストを処理するメソッドがワーカスレッドで実行されるにも関わらず、フィルターをイベントループで実行する必要がある場合、`@ServerRequestFilter (nonBlocking=true)` を使用することができます。しかし、これらのフィルターはこの設定を使わず、ワーカースレッドで実行される **どんな** フィルターよりも前に実行される必要があることに注意してください。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1818
msgid "Similarly, response filters can be declared with the link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerResponseFilter.html[`@ServerResponseFilter`] annotation:"
msgstr "同様に、レスポンスフィルターは link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerResponseFilter.html[`@ServerResponseFilter`] アノテーションで宣言することが可能です。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1831
#, no-wrap
msgid ""
"class Filters {\n"
"    @ServerResponseFilter\n"
"    public void getFilter(ContainerResponseContext responseContext) {\n"
"        Object entity = responseContext.getEntity();\n"
"        if(entity instanceof String) {\n"
"            // make it shout\n"
"            responseContext.setEntity(((String)entity).toUpperCase());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
"class Filters {\n"
"    @ServerResponseFilter\n"
"    public void getFilter(ContainerResponseContext responseContext) {\n"
"        Object entity = responseContext.getEntity();\n"
"        if(entity instanceof String) {\n"
"            // make it shout\n"
"            responseContext.setEntity(((String)entity).toUpperCase());\n"
"        }\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1834
msgid "Your filters may declare any of the following parameter types:"
msgstr "フィルターは、次のパラメータータイプのいずれかを宣言できます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:1835
#, no-wrap
msgid "Table Filter parameters"
msgstr "テーブルフィルターパラメーター"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1846
#, no-wrap
msgid "link:{jaxrsapi}/javax/ws/rs/container/ContainerResponseContext.html[`ContainerResponseContext`]"
msgstr "link:{jaxrsapi}/javax/ws/rs/container/ContainerResponseContext.html[`ContainerResponseContext`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1848
#, no-wrap
msgid "A context object to access the current response"
msgstr "現在のレスポンスにアクセスするためのコンテキストオブジェクト"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1849
#, no-wrap
msgid "link:{jdkapi}/java/lang/Throwable.html[`Throwable`]"
msgstr "link:{jdkapi}/java/lang/Throwable.html[`Throwable`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1851
#, no-wrap
msgid "Any thrown exception, or `null` (only for response filters)"
msgstr "出力された例外、または `null` (レスポンスフィルターの場合のみ)"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:1855
#, no-wrap
msgid "Table Filter return types"
msgstr "テーブルフィルターの戻り値の型"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1860
#, no-wrap
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`] or link:{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`] または link:{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1862
#, no-wrap
msgid "The response to send to the client instead of continuing the filter chain, or `null` if the filter chain should proceed"
msgstr "フィルターチェーンを続行する代わりにクライアントに送信するレスポンス、またはフィルターチェーンを続行する必要がある場合は null"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1863
#, no-wrap
msgid "link:{jdkapi}/java/util/Optional.html[`Optional<RestResponse<?>>`] or link:{jdkapi}/java/util/Optional.html[`Optional<Response>`]"
msgstr "link:{jdkapi}/java/util/Optional.html[`Optional<RestResponse<?>>`] または link:{jdkapi}/java/util/Optional.html[`Optional<Response>`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1865
#, no-wrap
msgid "An optional response to send to the client instead of continuing the filter chain, or an empty value if the filter chain should proceed"
msgstr "フィルターチェーンを続行する代わりにクライアントに送信するオプションのレスポンス、またはフィルターチェーンを続行する必要がある場合は空の値"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1866
#, no-wrap
msgid "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`] or link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"
msgstr "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`] または link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1868
#, no-wrap
msgid "An asynchronous response to send to the client instead of continuing the filter chain, or `null` if the filter chain should proceed"
msgstr "フィルターチェーンを続行する代わりにクライアントに送信する非同期レスポンス、またはフィルターチェーンを続行する必要がある場合は null"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1871
msgid "You can restrict the Resource methods for which a filter runs, by using link:{jaxrsapi}/javax/ws/rs/NameBinding.html[`@NameBinding`] meta-annotations."
msgstr "link:{jaxrsapi}/javax/ws/rs/NameBinding.html[`@NameBinding`] メタアノテーションを使用して、フィルターが実行されるリソースメソッドを制限できます。"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:1872
#, no-wrap
msgid "The JAX-RS way"
msgstr "JAX-RS の方法"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1875
msgid "You can also link:{jaxrsspec}#filters[declare request and response filters in the JAX-RS way]."
msgstr "link:{jaxrsspec}#filters[JAX-RS方式でリクエストフィルタ、レスポンスフィルタを宣言する]こともできます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1880
msgid "Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter` implementations respectively. These filters are suitable for processing the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata. They also have the capability to abort the request processing, for instance when the user does not have the permissions to access the endpoint."
msgstr "HTTP リクエストとレスポンスの両方とも、それぞれ `ContainerRequestFilter` または `ContainerResponseFilter` の実装を提供することで、 インターセプトすることができます。これらのフィルタは、メッセージに関連付けられたメタデータを処理するのに適しています。HTTP ヘッダ、クエリパラメーター、メディアタイプ、その他のメタデータです。また、ユーザーがエンドポイントにアクセスする権限を持っていない場合など、リクエスト処理を中止する機能も持っています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1883
msgid "Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing `ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr "`ContainerRequestFilter` を使用して、サービスにロギング機能を追加してみましょう。 `ContainerRequestFilter` を実装して、 `@Provider` アノテーションをつけることで実現できます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1887
#, no-wrap
msgid "package org.acme.rest.json;\n"
msgstr "package org.acme.rest.json;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1890
#, no-wrap
msgid ""
"import io.vertx.core.http.HttpServerRequest;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""
"import io.vertx.core.http.HttpServerRequest;\n"
"import org.jboss.logging.Logger;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1896
#, no-wrap
msgid ""
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.UriInfo;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.UriInfo;\n"
"import javax.ws.rs.ext.Provider;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1899
#, no-wrap
msgid ""
"@Provider\n"
"public class LoggingFilter implements ContainerRequestFilter {\n"
msgstr ""
"@Provider\n"
"public class LoggingFilter implements ContainerRequestFilter {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1901
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(LoggingFilter.class);\n"
msgstr "    private static final Logger LOG = Logger.getLogger(LoggingFilter.class);\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1904
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo info;\n"
msgstr ""
"    @Context\n"
"    UriInfo info;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1907
#, no-wrap
msgid ""
"    @Context\n"
"    HttpServerRequest request;\n"
msgstr ""
"    @Context\n"
"    HttpServerRequest request;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1910
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ContainerRequestContext context) {\n"
msgstr ""
"    @Override\n"
"    public void filter(ContainerRequestContext context) {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1914
#, no-wrap
msgid ""
"        final String method = context.getMethod();\n"
"        final String path = info.getPath();\n"
"        final String address = request.remoteAddress().toString();\n"
msgstr ""
"        final String method = context.getMethod();\n"
"        final String path = info.getPath();\n"
"        final String address = request.remoteAddress().toString();\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1918
#, no-wrap
msgid ""
"        LOG.infof(\"Request %s %s from IP %s\", method, path, address);\n"
"    }\n"
"}\n"
msgstr ""
"        LOG.infof(\"Request %s %s from IP %s\", method, path, address);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1921
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr "これで、RESTメソッドが呼び出されるたびに、リクエストがコンソールにログとして記録されるようになりました。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1928
#, no-wrap
msgid ""
"2019-06-05 12:44:26,526 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /legumes from IP 127.0.0.1\n"
"2019-06-05 12:49:19,623 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:50:44,019 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request POST /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:51:04,485 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 127.0.0.1\n"
msgstr ""
"2019-06-05 12:44:26,526 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /legumes from IP 127.0.0.1\n"
"2019-06-05 12:49:19,623 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:50:44,019 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request POST /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:51:04,485 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 127.0.0.1\n"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1930
#, no-wrap
msgid "Readers and Writers: mapping entities and HTTP bodies"
msgstr "リーダーとライター: マッピングエンティティーと HTTP 本文"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1938
#, fuzzy
msgid "Whenever your endpoint methods return an object (of when they return a link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`] or link:{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`] with an entity), RESTEasy Reactive will look for a way to map that into an HTTP response body."
msgstr "エンドポイントメソッドが（link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`] もしくはエンティティの link:{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`] を返し）オブジェクトを返すときはいつでも、RESTEasy Reactive は、それを HTTP レスポンス本文にマップする方法を探します。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1941
msgid "Similarly, whenever your endpoint method takes an object as parameter, we will look for a way to map the HTTP request body into that object."
msgstr "同様に、エンドポイントメソッドがオブジェクトをパラメーターとして受け取る場合は常に、HTTP リクエストの本文をそのオブジェクトにマッピングする方法を探します。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1946
msgid "This is done via a pluggable system of link:{jaxrsapi}/javax/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`] and link:{jaxrsapi}/javax/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`] interfaces, which are responsible for defining which Java type they map from/to, for which media types, and how they turn HTTP bodies to/from Java instances of that type."
msgstr "これは、link:{jaxrsapi}/javax/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`] と link:{jaxrsapi}/javax/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`] インターフェイスのプラグインシステムによって行われ、どの Java タイプからどのメディアタイプへマッピングするか、またそのタイプの Java インスタンスとどのように HTTP 本文をやり取りするかを定義する役割を持っています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1948
msgid "For example, if we have our own `Cheese` type on our endpoint:"
msgstr "たとえば、エンドポイントに独自の `Cheese` タイプがある場合:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1956
#: upstream/_guides/resteasy-reactive.adoc:2108
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1959
#, no-wrap
msgid ""
"class Cheese {\n"
"    public String name;\n"
msgstr ""
"class Cheese {\n"
"    public String name;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1964
#, no-wrap
msgid ""
"    public Cheese(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""
"    public Cheese(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1967
#: upstream/_guides/resteasy-reactive.adoc:2111
#, no-wrap
msgid ""
"@Path(\"cheese\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"cheese\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1972
#, no-wrap
msgid ""
"    @GET\n"
"    public Cheese sayCheese() {\n"
"        return new Cheese(\"Cheeeeeese\");\n"
"    }\n"
msgstr ""
"    @GET\n"
"    public Cheese sayCheese() {\n"
"        return new Cheese(\"Cheeeeeese\");\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1978
#, no-wrap
msgid ""
"    @PUT\n"
"    public void addCheese(Cheese cheese) {\n"
"        System.err.println(\"Received a new cheese: \" + cheese.name);\n"
"    }\n"
"}\n"
msgstr ""
"    @PUT\n"
"    public void addCheese(Cheese cheese) {\n"
"        System.err.println(\"Received a new cheese: \" + cheese.name);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1982
msgid "Then we can define how to read and write it with our body reader/writers, annotated with link:{jaxrsapi}/javax/ws/rs/ext/Provider.html[`@Provider`]:"
msgstr "次に、 link:{jaxrsapi}/javax/ws/rs/ext/Provider.html[`@Provider`] でアノテーションを付けたボディリーダー/ライターを使用して読み取りと書き込みの方法を定義できます:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1993
#: upstream/_guides/resteasy-reactive.adoc:2057
#, no-wrap
msgid ""
"import java.io.IOException;\n"
"import java.io.InputStream;\n"
"import java.io.OutputStream;\n"
"import java.lang.annotation.Annotation;\n"
"import java.lang.reflect.Type;\n"
"import java.nio.charset.StandardCharsets;\n"
msgstr ""
"import java.io.IOException;\n"
"import java.io.InputStream;\n"
"import java.io.OutputStream;\n"
"import java.lang.annotation.Annotation;\n"
"import java.lang.reflect.Type;\n"
"import java.nio.charset.StandardCharsets;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2000
#, no-wrap
msgid ""
"import javax.ws.rs.WebApplicationException;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import javax.ws.rs.ext.MessageBodyReader;\n"
"import javax.ws.rs.ext.MessageBodyWriter;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""
"import javax.ws.rs.WebApplicationException;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import javax.ws.rs.ext.MessageBodyReader;\n"
"import javax.ws.rs.ext.MessageBodyWriter;\n"
"import javax.ws.rs.ext.Provider;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2004
#, fuzzy, no-wrap
msgid ""
"@Provider\n"
"public class CheeseBodyHandler implements MessageBodyReader<Cheese>,\n"
"                                           MessageBodyWriter<Cheese> {\n"
msgstr ""
"@Provider\n"
"public class CheeseBodyHandler implements MessageBodyReader<Cheese>, \n"
"                                           MessageBodyWriter<Cheese> {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2010
#, fuzzy, no-wrap
msgid ""
"    @Override\n"
"    public boolean isWriteable(Class<?> type, Type genericType,\n"
"                               Annotation[] annotations, MediaType mediaType) {\n"
"        return type == Cheese.class;\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public boolean isWriteable(Class<?> type, Type genericType, \n"
"                               Annotation[] annotations, MediaType mediaType) {\n"
"        return type == Cheese.class;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2020
#, fuzzy, no-wrap
msgid ""
"    @Override\n"
"    public void writeTo(Cheese t, Class<?> type, Type genericType,\n"
"                        Annotation[] annotations, MediaType mediaType,\n"
"                        MultivaluedMap<String, Object> httpHeaders,\n"
"                        OutputStream entityStream)\n"
"            throws IOException, WebApplicationException {\n"
"        entityStream.write((\"[CheeseV1]\" + t.name)\n"
"                           .getBytes(StandardCharsets.UTF_8));\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public void writeTo(Cheese t, Class<?> type, Type genericType, \n"
"                        Annotation[] annotations, MediaType mediaType,\n"
"                        MultivaluedMap<String, Object> httpHeaders, \n"
"                        OutputStream entityStream)\n"
"            throws IOException, WebApplicationException {\n"
"        entityStream.write((\"[CheeseV1]\" + t.name)\n"
"                           .getBytes(StandardCharsets.UTF_8));\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2026
#, fuzzy, no-wrap
msgid ""
"    @Override\n"
"    public boolean isReadable(Class<?> type, Type genericType,\n"
"                              Annotation[] annotations, MediaType mediaType) {\n"
"        return type == Cheese.class;\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public boolean isReadable(Class<?> type, Type genericType, \n"
"                              Annotation[] annotations, MediaType mediaType) {\n"
"        return type == Cheese.class;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2038
#, fuzzy, no-wrap
msgid ""
"    @Override\n"
"    public Cheese readFrom(Class<Cheese> type, Type genericType,\n"
"                            Annotation[] annotations, MediaType mediaType,\n"
"                            MultivaluedMap<String, String> httpHeaders,\n"
"                            InputStream entityStream)\n"
"            throws IOException, WebApplicationException {\n"
"        String body = new String(entityStream.readAllBytes(), StandardCharsets.UTF_8);\n"
"        if(body.startsWith(\"[CheeseV1]\"))\n"
"            return new Cheese(body.substring(11));\n"
"        throw new IOException(\"Invalid cheese: \" + body);\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public Cheese readFrom(Class<Cheese> type, Type genericType, \n"
"                            Annotation[] annotations, MediaType mediaType,\n"
"                            MultivaluedMap<String, String> httpHeaders,\n"
"                            InputStream entityStream)\n"
"            throws IOException, WebApplicationException {\n"
"        String body = new String(entityStream.readAllBytes(), StandardCharsets.UTF_8);\n"
"        if(body.startsWith(\"[CheeseV1]\"))\n"
"            return new Cheese(body.substring(11));\n"
"        throw new IOException(\"Invalid cheese: \" + body);\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2046
msgid "If you want to get the most performance our of your writer, you can extend the link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerMessageBodyWriter.html[`ServerMessageBodyWriter`] instead of link:{jaxrsapi}/javax/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`] where you will be able to use less reflection and bypass the blocking IO layer:"
msgstr "ライターのパフォーマンスを最大限に高めたい場合は、 link:{jaxrsapi}/javax/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`] の代わりに link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerMessageBodyWriter.html[`ServerMessageBodyWriter`] を拡張できます。こちらでは、リフレクションの使用を減らし、ブロッキング IO レイヤーをバイパスできます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2063
#, no-wrap
msgid ""
"import javax.ws.rs.WebApplicationException;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import javax.ws.rs.ext.MessageBodyReader;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""
"import javax.ws.rs.WebApplicationException;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import javax.ws.rs.ext.MessageBodyReader;\n"
"import javax.ws.rs.ext.Provider;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2067
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.server.spi.ResteasyReactiveResourceInfo;\n"
"import org.jboss.resteasy.reactive.server.spi.ServerMessageBodyWriter;\n"
"import org.jboss.resteasy.reactive.server.spi.ServerRequestContext;\n"
msgstr ""
"import org.jboss.resteasy.reactive.server.spi.ResteasyReactiveResourceInfo;\n"
"import org.jboss.resteasy.reactive.server.spi.ServerMessageBodyWriter;\n"
"import org.jboss.resteasy.reactive.server.spi.ServerRequestContext;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2071
#, fuzzy, no-wrap
msgid ""
"@Provider\n"
"public class CheeseBodyHandler implements MessageBodyReader<Cheese>,\n"
"                                           ServerMessageBodyWriter<Cheese> {\n"
msgstr ""
"@Provider\n"
"public class CheeseBodyHandler implements MessageBodyReader<Cheese>, \n"
"                                           ServerMessageBodyWriter<Cheese> {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2073
#, no-wrap
msgid "    // …\n"
msgstr "    // …\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2079
#, fuzzy, no-wrap
msgid ""
"    @Override\n"
"    public boolean isWriteable(Class<?> type, ResteasyReactiveResourceInfo target,\n"
"                               MediaType mediaType) {\n"
"        return type == Cheese.class;\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public boolean isWriteable(Class<?> type, ResteasyReactiveResourceInfo target, \n"
"                               MediaType mediaType) {\n"
"        return type == Cheese.class;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2086
#, fuzzy, no-wrap
msgid ""
"    @Override\n"
"    public void writeResponse(Cheese t, ServerRequestContext context)\n"
"      throws WebApplicationException, IOException {\n"
"        context.serverResponse().end(\"[CheeseV1]\" + t.name);\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public void writeResponse(Cheese t, ServerRequestContext context) \n"
"      throws WebApplicationException, IOException {\n"
"        context.serverResponse().end(\"[CheeseV1]\" + t.name);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2091
msgid "You can restrict which content-types your reader/writer apply to by adding link:{jaxrsapi}/javax/ws/rs/Consumes.html[`Consumes`]/link:{jaxrsapi}/javax/ws/rs/Produces.html[`Produces`] annotations on your provider class."
msgstr "プロバイダークラスに link:{jaxrsapi}/javax/ws/rs/Consumes.html[`Consumes`]/link:{jaxrsapi}/javax/ws/rs/Produces.html[`Produces`] アノテーションを追加すると、リーダー/ライターが適用するコンテンツタイプを制限することができます。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:2092
#, no-wrap
msgid "Reader and Writer interceptors"
msgstr "リーダーおよびライターインターセプター"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2098
msgid "Just as you can intercept requests and responses, you can also intercept readers and writers, by extending the link:{jaxrsapi}/javax/ws/rs/ext/ReaderInterceptor.html[`ReaderInterceptor`] or link:{jaxrsapi}/javax/ws/rs/ext/WriterInterceptor.html[`WriterInterceptor`] on a class annotated with link:{jaxrsapi}/javax/ws/rs/ext/Provider.html[`@Provider`]."
msgstr "リクエストとレスポンスをインターセプトできるように、link:{jaxrsapi}/javax/ws/rs/ext/Provider.html[`@Provider`]でアノテーションが付けられたクラスの link:{jaxrsapi}/javax/ws/rs/ext/ReaderInterceptor.html[`ReaderInterceptor`] または link:{jaxrsapi}/javax/ws/rs/ext/WriterInterceptor.html[`WriterInterceptor`] を拡張することによってリーダーとライターをインターセプトすることもできます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2100
msgid "If we look at this endpoint:"
msgstr "このエンドポイントを見ると、次のようになります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2116
#, no-wrap
msgid ""
"    @GET\n"
"    public String sayCheese() {\n"
"        return \"Cheeeeeese\";\n"
"    }\n"
msgstr ""
"    @GET\n"
"    public String sayCheese() {\n"
"        return \"Cheeeeeese\";\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2122
#, no-wrap
msgid ""
"    @PUT\n"
"    public void addCheese(String cheese) {\n"
"        System.err.println(\"Received a new cheese: \" + cheese);\n"
"    }\n"
"}\n"
msgstr ""
"    @PUT\n"
"    public void addCheese(String cheese) {\n"
"        System.err.println(\"Received a new cheese: \" + cheese);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2125
msgid "We can add reader and writer interceptors like this:"
msgstr "次のようなリーダーとライターのインターセプターを追加できます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2131
#, no-wrap
msgid "import java.io.IOException;\n"
msgstr "import java.io.IOException;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2138
#, no-wrap
msgid ""
"import javax.ws.rs.WebApplicationException;\n"
"import javax.ws.rs.ext.Provider;\n"
"import javax.ws.rs.ext.ReaderInterceptor;\n"
"import javax.ws.rs.ext.ReaderInterceptorContext;\n"
"import javax.ws.rs.ext.WriterInterceptor;\n"
"import javax.ws.rs.ext.WriterInterceptorContext;\n"
msgstr ""
"import javax.ws.rs.WebApplicationException;\n"
"import javax.ws.rs.ext.Provider;\n"
"import javax.ws.rs.ext.ReaderInterceptor;\n"
"import javax.ws.rs.ext.ReaderInterceptorContext;\n"
"import javax.ws.rs.ext.WriterInterceptor;\n"
"import javax.ws.rs.ext.WriterInterceptorContext;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2141
#, no-wrap
msgid ""
"@Provider\n"
"public class CheeseIOInterceptor implements ReaderInterceptor, WriterInterceptor {\n"
msgstr ""
"@Provider\n"
"public class CheeseIOInterceptor implements ReaderInterceptor, WriterInterceptor {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2149
#, no-wrap
msgid ""
"    @Override\n"
"    public void aroundWriteTo(WriterInterceptorContext context)\n"
"      throws IOException, WebApplicationException {\n"
"        System.err.println(\"Before writing \" + context.getEntity());\n"
"        context.proceed();\n"
"        System.err.println(\"After writing \" + context.getEntity());\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public void aroundWriteTo(WriterInterceptorContext context)\n"
"      throws IOException, WebApplicationException {\n"
"        System.err.println(\"Before writing \" + context.getEntity());\n"
"        context.proceed();\n"
"        System.err.println(\"After writing \" + context.getEntity());\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2159
#, no-wrap
msgid ""
"    @Override\n"
"    public Object aroundReadFrom(ReaderInterceptorContext context)\n"
"      throws IOException, WebApplicationException {\n"
"        System.err.println(\"Before reading \" + context.getGenericType());\n"
"        Object entity = context.proceed();\n"
"        System.err.println(\"After reading \" + entity);\n"
"        return entity;\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public Object aroundReadFrom(ReaderInterceptorContext context)\n"
"      throws IOException, WebApplicationException {\n"
"        System.err.println(\"Before reading \" + context.getGenericType());\n"
"        Object entity = context.proceed();\n"
"        System.err.println(\"After reading \" + entity);\n"
"        return entity;\n"
"    }\n"
"}\n"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:2161
#, no-wrap
msgid "RESTEasy Reactive and REST Client Reactive interactions"
msgstr "RESTEasy Reactive および REST Client Reactive の相互作用"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2165
msgid "In Quarkus, the RESTEasy Reactive extension and xref:rest-client-reactive.adoc[the REST Client Reactive extension] share the same infrastructure.  One important consequence of this consideration is that they share the same list of providers (in the JAX-RS meaning of the word)."
msgstr "Quarkus では、RESTEasy Reactive エクステンションと xref:rest-client-reactive.adoc[REST クライアントリアクティブエクステンション] は同じインフラストラクチャを共有しています。この考慮の重要な結果の一つは、(JAX-RS の意味での) プロバイダーのリストを共有しているということです。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2168
msgid "For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls, which might not be the desired behavior."
msgstr "例えば、 `WriterInterceptor` を宣言した場合、デフォルトではサーバーの呼び出しとクライアントの呼び出しの両方をインターセプトしますが、これは望ましい動作ではないかもしれません。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2170
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "しかし、このデフォルトの動作を変更してプロバイダを制約することができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2172
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.SERVER)` アノテーションを追加することで、 *サーバー* コールのみを考慮します。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2173
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.CLIENT)` アノテーションを追加することで、 *クライアント* コールのみを考慮します。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:2174
#, no-wrap
msgid "Parameter mapping"
msgstr "パラメータマッピング"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2178
msgid "All <<request-parameters,Request Parameters>> can be declared as link:{jdkapi}/java/lang/String.html[`String`], but also any of the following types:"
msgstr "すべての<<request-parameters,リクエストパラメーター>> は link:{jdkapi}/java/lang/String.html[`String`] として宣言することができます。しかし、それだけでなく、次のいずれかの型でも宣言できます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2181
msgid "Types for which a link:{jaxrsapi}/javax/ws/rs/ext/ParamConverter.html[`ParamConverter`] is available via a registered link:{jaxrsapi}/javax/ws/rs/ext/ParamConverterProvider.html[`ParamConverterProvider`]."
msgstr "link:{jaxrsapi}/javax/ws/rs/ext/ParamConverterProvider.html[`ParamConverterProvider`] を通じて登録済の link:{jaxrsapi}/javax/ws/rs/ext/ParamConverter.html[`ParamConverter`] が存在する型"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2182
msgid "Primitive types."
msgstr "プリミティブ型"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2183
msgid "Types that have a constructor that accepts a single link:{jdkapi}/java/lang/String.html[`String`] argument."
msgstr "単一の link:{jdkapi}/java/lang/String.html[`String`] 引数を受け入れるコンストラクターを持つ型。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2186
msgid "Types that have a static method named `valueOf` or `fromString` with a single link:{jdkapi}/java/lang/String.html[`String`] argument that return an instance of the type. If both methods are present then `valueOf` will be used unless the type is an `enum` in which case `fromString` will be used."
msgstr "link:{jdkapi}/java/lang/String.html[`String`] という引数を持ち、その型のインスタンスを返す `valueOf` または `fromString` という名前の静的メソッドを持っている型。もし両方のメソッドが存在する場合は、`valueOf` が使用されます。ただし、その型が `enum` の場合は `fromString` が使用されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2188
msgid "link:{jdkapi}/java/util/List.html[`List<T>`], link:{jdkapi}/java/util/Set.html[`Set<T>`], or link:{jdkapi}/java/util/SortedSet.html[`SortedSet<T>`], where `T` satisfies any above criterion."
msgstr "link:{jdkapi}/java/util/List.html[`List<T>`]、link:{jdkapi}/java/util/Set.html[`Set<T>`]、または link:{jdkapi}/java/util/SortedSet.html[`SortedSet<T>`]。ここで `T` は上記の基準を満たします。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2190
msgid "The following example illustrates all those possibilities:"
msgstr "次の例は、これらすべての可能性を示しています。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2198
#, no-wrap
msgid ""
"import java.lang.annotation.Annotation;\n"
"import java.lang.reflect.Type;\n"
"import java.util.List;\n"
msgstr ""
"import java.lang.annotation.Annotation;\n"
"import java.lang.reflect.Type;\n"
"import java.util.List;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2204
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.ext.ParamConverter;\n"
"import javax.ws.rs.ext.ParamConverterProvider;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.ext.ParamConverter;\n"
"import javax.ws.rs.ext.ParamConverterProvider;\n"
"import javax.ws.rs.ext.Provider;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2206
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr "import org.jboss.resteasy.reactive.RestQuery;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2209
#, no-wrap
msgid ""
"@Provider\n"
"class MyConverterProvider implements ParamConverterProvider {\n"
msgstr ""
"@Provider\n"
"class MyConverterProvider implements ParamConverterProvider {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2219
#, no-wrap
msgid ""
"    @Override\n"
"    public <T> ParamConverter<T> getConverter(Class<T> rawType, Type genericType,\n"
"                                              Annotation[] annotations) {\n"
"        // declare a converter for this type\n"
"        if(rawType == Converter.class) {\n"
"            return (ParamConverter<T>) new MyConverter();\n"
"        }\n"
"        return null;\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public <T> ParamConverter<T> getConverter(Class<T> rawType, Type genericType,\n"
"                                              Annotation[] annotations) {\n"
"        // declare a converter for this type\n"
"        if(rawType == Converter.class) {\n"
"            return (ParamConverter<T>) new MyConverter();\n"
"        }\n"
"        return null;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2224
#, no-wrap
msgid ""
"// this is my custom converter\n"
"class MyConverter implements ParamConverter<Converter> {\n"
msgstr ""
"// this is my custom converter\n"
"class MyConverter implements ParamConverter<Converter> {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2229
#, no-wrap
msgid ""
"    @Override\n"
"    public Converter fromString(String value) {\n"
"        return new Converter(value);\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public Converter fromString(String value) {\n"
"        return new Converter(value);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2234
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString(Converter value) {\n"
"        return value.value;\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public String toString(Converter value) {\n"
"        return value.value;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2244
#, no-wrap
msgid ""
"// this uses a converter\n"
"class Converter {\n"
"    String value;\n"
"    Converter(String value) {\n"
"        this.value = value;\n"
"    }\n"
"}\n"
msgstr ""
"// this uses a converter\n"
"class Converter {\n"
"    String value;\n"
"    Converter(String value) {\n"
"        this.value = value;\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2252
#, no-wrap
msgid ""
"class Constructor {\n"
"    String value;\n"
"    // this will use the constructor\n"
"    public Constructor(String value) {\n"
"        this.value = value;\n"
"    }\n"
"}\n"
msgstr ""
"class Constructor {\n"
"    String value;\n"
"    // this will use the constructor\n"
"    public Constructor(String value) {\n"
"        this.value = value;\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2263
#, no-wrap
msgid ""
"class ValueOf {\n"
"    String value;\n"
"    private ValueOf(String value) {\n"
"        this.value = value;\n"
"    }\n"
"    // this will use the valueOf method\n"
"    public static ValueOf valueOf(String value) {\n"
"        return new ValueOf(value);\n"
"    }\n"
"}\n"
msgstr ""
"class ValueOf {\n"
"    String value;\n"
"    private ValueOf(String value) {\n"
"        this.value = value;\n"
"    }\n"
"    // this will use the valueOf method\n"
"    public static ValueOf valueOf(String value) {\n"
"        return new ValueOf(value);\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2276
#, fuzzy, no-wrap
msgid ""
"    @Path(\"{converter}/{constructor}/{primitive}/{valueOf}\")\n"
"    @GET\n"
"    public String conversions(Converter converter, Constructor constructor,\n"
"                              int primitive, ValueOf valueOf,\n"
"                              @RestQuery List<Constructor> list) {\n"
"        return converter + \"/\" + constructor + \"/\" + primitive\n"
"               + \"/\" + valueOf + \"/\" + list;\n"
"    }\n"
"}\n"
msgstr ""
"    @Path(\"{converter}/{constructor}/{primitive}/{valueOf}\")\n"
"    @GET\n"
"    public String convertions(Converter converter, Constructor constructor,\n"
"                              int primitive, ValueOf valueOf, \n"
"                              @RestQuery List<Constructor> list) {\n"
"        return converter + \"/\" + constructor + \"/\" + primitive \n"
"               + \"/\" + valueOf + \"/\" + list;\n"
"    }\n"
"}\n"

#. type: Title ====
#: upstream/_guides/resteasy-reactive.adoc:2278
#, no-wrap
msgid "Handling dates"
msgstr "日付の取り扱い"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2282
#, fuzzy
msgid "RESTEasy Reactive supports the use of the implementations of `java.time.Temporal` (like `java.time.LocalDateTime`) as query, path or form params. Furthermore, it provides the `@org.jboss.resteasy.reactive.DateFormat` annotation which can be used to set a custom expected pattern (otherwise the JDK's default format for each type is used implicitly)."
msgstr "RESTEasy Reactiveは、 `java.time.Temporal` の実装（ `java.time.LocalDateTime` のような）を、クエリ、パス、フォームのパラメータとして使用することをサポートしています。さらに、 `@org.jboss.resteasy.reactive.DateFormat` アノテーションを提供しており、これを使用してカスタムの期待されるパターンを設定することができます（そうしないと、各タイプに対する JDK のデフォルトフォーマットが暗黙のうちに使用されます）。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:2283
#, no-wrap
msgid "Preconditions"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2287
msgid "https://tools.ietf.org/html/rfc7232[HTTP allows requests to be conditional], based on a number of conditions, such as:"
msgstr "以下のようないくつかの条件の下で、link:https://tools.ietf.org/html/rfc7232[HTTPでは条件付きのリクエストが可能です] :"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2289
msgid "Date of last resource modification"
msgstr "リソースの最終変更日"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2290
msgid "A resource tag, similar to a hash code of the resource to designate its state or version"
msgstr "リソースの状態またはバージョンを指定するためのリソースのハッシュコードに似たリソースタグ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2293
msgid "Let's see how you can do conditional request validation using the link:{jaxrsapi}/javax/ws/rs/core/Request.html[`Request`] context object:"
msgstr "link:{jaxrsapi}/javax/ws/rs/core/Request.html[`Request`] コンテキストオブジェクトを使用して、条件付きリクエスト検証を行う方法を見てみましょう。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2302
#, no-wrap
msgid ""
"import java.time.Instant;\n"
"import java.time.temporal.ChronoUnit;\n"
"import java.time.temporal.TemporalUnit;\n"
"import java.util.Date;\n"
msgstr ""
"import java.time.Instant;\n"
"import java.time.temporal.ChronoUnit;\n"
"import java.time.temporal.TemporalUnit;\n"
"import java.util.Date;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2310
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.EntityTag;\n"
"import javax.ws.rs.core.Request;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.core.Response.ResponseBuilder;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.EntityTag;\n"
"import javax.ws.rs.core.Request;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.core.Response.ResponseBuilder;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2313
#, no-wrap
msgid ""
"@Path(\"conditional\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"conditional\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2320
#, no-wrap
msgid ""
"    // It's important to keep our date on seconds because that's how it's sent to the\n"
"    // user in the Last-Modified header\n"
"    private Date date = Date.from(Instant.now().truncatedTo(ChronoUnit.SECONDS));\n"
"    private int version = 1;\n"
"    private EntityTag tag = new EntityTag(\"v1\");\n"
"    private String resource = \"Some resource\";\n"
msgstr ""
"    // It's important to keep our date on seconds because that's how it's sent to the\n"
"    // user in the Last-Modified header\n"
"    private Date date = Date.from(Instant.now().truncatedTo(ChronoUnit.SECONDS));\n"
"    private int version = 1;\n"
"    private EntityTag tag = new EntityTag(\"v1\");\n"
"    private String resource = \"Some resource\";\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2333
#, no-wrap
msgid ""
"    @GET\n"
"    public Response get(Request request) {\n"
"        // first evaluate preconditions\n"
"        ResponseBuilder conditionalResponse = request.evaluatePreconditions(date, tag);\n"
"        if(conditionalResponse != null)\n"
"            return conditionalResponse.build();\n"
"        // preconditions are OK\n"
"        return Response.ok(resource)\n"
"                .lastModified(date)\n"
"                .tag(tag)\n"
"                .build();\n"
"    }\n"
msgstr ""
"    @GET\n"
"    public Response get(Request request) {\n"
"        // first evaluate preconditions\n"
"        ResponseBuilder conditionalResponse = request.evaluatePreconditions(date, tag);\n"
"        if(conditionalResponse != null)\n"
"            return conditionalResponse.build();\n"
"        // preconditions are OK\n"
"        return Response.ok(resource)\n"
"                .lastModified(date)\n"
"                .tag(tag)\n"
"                .build();\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2351
#, no-wrap
msgid ""
"    @PUT\n"
"    public Response put(Request request, String body) {\n"
"        // first evaluate preconditions\n"
"        ResponseBuilder conditionalResponse = request.evaluatePreconditions(date, tag);\n"
"        if(conditionalResponse != null)\n"
"            return conditionalResponse.build();\n"
"        // preconditions are OK, we can update our resource\n"
"        resource = body;\n"
"        date = Date.from(Instant.now().truncatedTo(ChronoUnit.SECONDS));\n"
"        version++;\n"
"        tag = new EntityTag(\"v\" + version);\n"
"        return Response.ok(resource)\n"
"                .lastModified(date)\n"
"                .tag(tag)\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""
"    @PUT\n"
"    public Response put(Request request, String body) {\n"
"        // first evaluate preconditions\n"
"        ResponseBuilder conditionalResponse = request.evaluatePreconditions(date, tag);\n"
"        if(conditionalResponse != null)\n"
"            return conditionalResponse.build();\n"
"        // preconditions are OK, we can update our resource\n"
"        resource = body;\n"
"        date = Date.from(Instant.now().truncatedTo(ChronoUnit.SECONDS));\n"
"        version++;\n"
"        tag = new EntityTag(\"v\" + version);\n"
"        return Response.ok(resource)\n"
"                .lastModified(date)\n"
"                .tag(tag)\n"
"                .build();\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2354
msgid "When we call `GET /conditional` the first time, we will get this response:"
msgstr "`GET /conditional` を初めて呼び出すと、このようなレスポンスが返ってきます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2362
#, no-wrap
msgid ""
"HTTP/1.1 200 OK\n"
"Content-Type: text/plain;charset=UTF-8\n"
"ETag: \"v1\"\n"
"Last-Modified: Wed, 09 Dec 2020 16:10:19 GMT\n"
"Content-Length: 13\n"
msgstr ""
"HTTP/1.1 200 OK\n"
"Content-Type: text/plain;charset=UTF-8\n"
"ETag: \"v1\"\n"
"Last-Modified: Wed, 09 Dec 2020 16:10:19 GMT\n"
"Content-Length: 13\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2364
#, no-wrap
msgid "Some resource\n"
msgstr "Some resource\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2367
msgid "So now if we want to check if we need to fetch a new version, we can make the following request:"
msgstr "これで、新しいバージョンを取得する必要があるかどうかを確認したい場合は、次のようなリクエストを行うことができます:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2373
#, no-wrap
msgid ""
"GET /conditional HTTP/1.1\n"
"Host: localhost:8080\n"
"If-Modified-Since: Wed, 09 Dec 2020 16:10:19 GMT\n"
msgstr ""
"GET /conditional HTTP/1.1\n"
"Host: localhost:8080\n"
"If-Modified-Since: Wed, 09 Dec 2020 16:10:19 GMT\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2376
msgid "And we would get the following response:"
msgstr "そして、次のようなレスポンスが返ってきます:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2380
#, no-wrap
msgid "HTTP/1.1 304 Not Modified\n"
msgstr "HTTP/1.1 304 Not Modified\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2386
msgid "Because the resource has not been modified since that date. This saves on sending the resource, but can also help your users detect concurrent modification, for example, let's suppose that one client wants to update the resource, but another user has modified it since. You can follow the previous `GET` request with this update:"
msgstr "なぜなら、そのリソースはその日以降に変更されていないからです。これはリソースを送信する手間を省くだけでなく、ユーザーが同時に変更されたことを検出するのにも役立ちます。たとえば、あるクライアントがリソースを更新したいが、別のユーザーがその後にリソースを変更したとしましょう。この場合、前の `GET` リクエストに続いて、この更新を行うことができます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2395
#, no-wrap
msgid ""
"PUT /conditional HTTP/1.1\n"
"Host: localhost:8080\n"
"If-Unmodified-Since: Wed, 09 Dec 2020 16:25:43 GMT\n"
"If-Match: v1\n"
"Content-Length: 8\n"
"Content-Type: text/plain\n"
msgstr ""
"PUT /conditional HTTP/1.1\n"
"Host: localhost:8080\n"
"If-Unmodified-Since: Wed, 09 Dec 2020 16:25:43 GMT\n"
"If-Match: v1\n"
"Content-Length: 8\n"
"Content-Type: text/plain\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2397
#, no-wrap
msgid "newstuff\n"
msgstr "newstuff\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2401
msgid "And if some other user has modified the resource between your `GET` and your `PUT` you would get this answer back:"
msgstr "また、他のユーザーが GET と PUT の間のリソースを変更した場合は、次の回答が返されます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2407
#, no-wrap
msgid ""
"HTTP/1.1 412 Precondition Failed\n"
"ETag: \"v2\"\n"
"Content-Length: 0\n"
msgstr ""
"HTTP/1.1 412 Precondition Failed\n"
"ETag: \"v2\"\n"
"Content-Length: 0\n"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:2409
#, no-wrap
msgid "Negotiation"
msgstr "ネゴシエーション"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2416
#, fuzzy
msgid "One of the main ideas of REST (https://tools.ietf.org/html/rfc7231#section-3.4[and HTTP]) is that your resource is independent of its representation, and that both the client and server are free to represent their resources in as many media types as they want. This allows the server to declare support for multiple representations and let the client declare which ones it supports and get served something appropriate."
msgstr "REST (https://tools.ietf.org/html/rfc7231#section-3.4[および HTTP]) の主な考え方の 1 つは、リソースはその表現から独立しており、クライアントとサーバーの両方が、望むだけ多くのメディアタイプでリソースを自由に表現できることです。これにより、サーバーは複数の表現のサポートを宣言し、クライアントはどの表現をサポートするかを宣言し、適切なものを提供されるようにすることができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2418
msgid "The following endpoint supports serving cheese in plain text or JSON:"
msgstr "次のエンドポイントは、プレーンテキストまたは JSON での cheese の提供をサポートしています。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2429
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2431
#, no-wrap
msgid "import com.fasterxml.jackson.annotation.JsonCreator;\n"
msgstr "import com.fasterxml.jackson.annotation.JsonCreator;\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2443
#, no-wrap
msgid ""
"class Cheese {\n"
"    public String name;\n"
"    @JsonCreator\n"
"    public Cheese(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    @Override\n"
"    public String toString() {\n"
"        return \"Cheese: \" + name;\n"
"    }\n"
"}\n"
msgstr ""
"class Cheese {\n"
"    public String name;\n"
"    @JsonCreator\n"
"    public Cheese(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    @Override\n"
"    public String toString() {\n"
"        return \"Cheese: \" + name;\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2446
#, no-wrap
msgid ""
"@Path(\"negotiated\")\n"
"public class Endpoint {\n"
msgstr ""
"@Path(\"negotiated\")\n"
"public class Endpoint {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2452
#, no-wrap
msgid ""
"    @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN})\n"
"    @GET\n"
"    public Cheese get() {\n"
"        return new Cheese(\"Morbier\");\n"
"    }\n"
msgstr ""
"    @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN})\n"
"    @GET\n"
"    public Cheese get() {\n"
"        return new Cheese(\"Morbier\");\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2458
#, no-wrap
msgid ""
"    @Consumes(MediaType.TEXT_PLAIN)\n"
"    @PUT\n"
"    public Cheese putString(String cheese) {\n"
"        return new Cheese(cheese);\n"
"    }\n"
msgstr ""
"    @Consumes(MediaType.TEXT_PLAIN)\n"
"    @PUT\n"
"    public Cheese putString(String cheese) {\n"
"        return new Cheese(cheese);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2465
#, no-wrap
msgid ""
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @PUT\n"
"    public Cheese putJson(Cheese cheese) {\n"
"        return cheese;\n"
"    }\n"
"}\n"
msgstr ""
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @PUT\n"
"    public Cheese putJson(Cheese cheese) {\n"
"        return cheese;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2469
msgid "The user will be able to select which representation it gets with the link:{httpspec}#section-5.3.2[`Accept`] header, in the case of JSON:"
msgstr "JSON の場合、ユーザーは link:{httpspec}#section-5.3.2[`Accept`] ヘッダーでどの表現を取得するかを選択することができます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2475
#, no-wrap
msgid ""
"> GET /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Accept: application/json\n"
msgstr ""
"> GET /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Accept: application/json\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2481
#, fuzzy, no-wrap
msgid ""
"< HTTP/1.1 200 OK\n"
"< Content-Type: application/json\n"
"< Content-Length: 18\n"
"<\n"
"< {\"name\":\"Morbier\"}\n"
msgstr ""
"< HTTP/1.1 200 OK\n"
"< Content-Type: application/json\n"
"< Content-Length: 18\n"
"< \n"
"< {\"name\":\"Morbier\"} \n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2484
msgid "And for text:"
msgstr "そしてテキストの場合:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2496
#, fuzzy, no-wrap
msgid ""
"> GET /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Accept: text/plain\n"
">\n"
"< HTTP/1.1 200 OK\n"
"< Content-Type: text/plain\n"
"< Content-Length: 15\n"
"<\n"
"< Cheese: Morbier\n"
msgstr ""
"> GET /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Accept: text/plain\n"
"> \n"
"< HTTP/1.1 200 OK\n"
"< Content-Type: text/plain\n"
"< Content-Length: 15\n"
"< \n"
"< Cheese: Morbier \n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2499
msgid "Similarly, you can `PUT` two different representations. JSON:"
msgstr "同様に、2 つの異なる表現を PUT することができます。JSON:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2508
#, fuzzy, no-wrap
msgid ""
"> PUT /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Content-Type: application/json\n"
"> Content-Length: 16\n"
">\n"
"> {\"name\": \"brie\"}\n"
msgstr ""
"> PUT /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Content-Type: application/json\n"
"> Content-Length: 16\n"
"> \n"
"> {\"name\": \"brie\"}\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2514
#, fuzzy, no-wrap
msgid ""
"< HTTP/1.1 200 OK\n"
"< Content-Type: application/json;charset=UTF-8\n"
"< Content-Length: 15\n"
"<\n"
"< {\"name\":\"brie\"}\n"
msgstr ""
"< HTTP/1.1 200 OK\n"
"< Content-Type: application/json;charset=UTF-8\n"
"< Content-Length: 15\n"
"< \n"
"< {\"name\":\"brie\"} \n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2517
msgid "Or plain text:"
msgstr "またはプレーンテキスト:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2526
#, no-wrap
msgid ""
"> PUT /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Content-Type: text/plain\n"
"> Content-Length: 9\n"
">\n"
"> roquefort\n"
msgstr ""
"> PUT /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Content-Type: text/plain\n"
"> Content-Length: 9\n"
">\n"
"> roquefort\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2532
#, fuzzy, no-wrap
msgid ""
"< HTTP/1.1 200 OK\n"
"< Content-Type: application/json;charset=UTF-8\n"
"< Content-Length: 20\n"
"<\n"
"< {\"name\":\"roquefort\"}\n"
msgstr ""
"< HTTP/1.1 200 OK\n"
"< Content-Type: application/json;charset=UTF-8\n"
"< Content-Length: 20\n"
"< \n"
"< {\"name\":\"roquefort\"} \n"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:2534
#, no-wrap
msgid "HTTP Compression"
msgstr "HTTP 圧縮"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2538
msgid "The body of an HTTP response is not compressed by default.  You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr "HTTP レスポンスのボディは、デフォルトでは圧縮されていません。`quarkus.http.enable-compression=true` を使用して HTTP 圧縮サポートを有効にできます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2540
msgid "If compression support is enabled then the response body is compressed if:"
msgstr "圧縮サポートが有効であれば、以下の場合にレスポンスボディが圧縮されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2542
msgid "the resource method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr "ルートメソッドが `@io.quarkus.vertx.http.Compressed` でアノテーションされている、または"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2543
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr "`Content-Type` ヘッダーが設定されており、その値は `quarkus.http.compress-media-types` を介して設定された圧縮メディアタイプである。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2545
msgid "The response body is never compressed if:"
msgstr "次の場合、レスポンスボディは圧縮されません。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2547
msgid "the resource method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr "ルートメソッドが `@io.quarkus.vertx.http.Uncompressed` でアノテーションされている、または"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2548
msgid "the `Content-Type` header is not set."
msgstr "`Content-Type` ヘッダーが設定されていない。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2550
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript` and `application/javascript`."
msgstr "デフォルトでは、次のメディアタイプのリストが圧縮されています: `text/html`、`text/plain`、`text/xml`、`text/css`、`text/javascript`、`application/javascript`。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2552
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr "クライアントが HTTP 圧縮をサポートしていない場合、レスポンスボディは圧縮されません。"

#. type: Title ==
#: upstream/_guides/resteasy-reactive.adoc:2554
#, no-wrap
msgid "Include/Exclude JAX-RS classes with build time conditions"
msgstr "ビルド時条件でJAX-RSクラスを含める/除外する"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2558
msgid "Quarkus enables the inclusion or exclusion of JAX-RS Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.  Thus, the various JAX-RS classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these JAX-RS classes should be included."
msgstr "Quarkusでは、CDI Beanの場合と同様に、ビルド時の条件に応じて、JAX-RSリソース、プロバイダー、および機能を直接包含または除外することができます。したがって、さまざまなJAX-RSクラスは、プロファイル条件（ `@io.quarkus.arc.profile.IfBuildProfile` または `@io.quarkus.arc.profile.UnlessBuildProfile` ）および／またはプロパティ条件（ `io.quarkus.arc.properties.IfBuildProperty` または `io.quarkus.arc.properties.UnlessBuildProperty` ）でアノテーションすることができ、構築時にどの条件でこれらのJAX-RSクラスが含まれるべきかをQuarkusに示すことができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2560
msgid "In the following example, Quarkus includes the endpoint `sayHello` if and only if the build profile `app1` has been enabled."
msgstr "次の例では、Quarkusは、ビルドプロファイル `app1` が有効になっている場合に限り、エンドポイント `sayHello` を含めます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2565
#, no-wrap
msgid ""
"@IfBuildProfile(\"app1\")\n"
"public class ResourceForApp1Only {\n"
msgstr ""
"@IfBuildProfile(\"app1\")\n"
"public class ResourceForApp1Only {\n"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:2572
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"sayHello\")\n"
"    public String sayHello() {\n"
"        return \"hello\";\n"
"     }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"sayHello\")\n"
"    public String sayHello() {\n"
"        return \"hello\";\n"
"     }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2575
msgid "Please note that if a JAX-RS Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the JAX-RS Application."
msgstr "JAX-RSアプリケーションが検出され、メソッド `getClasses()` および／または `getSingletons()` がオーバーライドされている／されている場合、Quarkusはビルド時の条件を無視し、JAX-RSアプリケーションで定義されているもののみを考慮することに注意してください。"

#. type: Title ==
#: upstream/_guides/resteasy-reactive.adoc:2577
#, no-wrap
msgid "RESTEasy Reactive client"
msgstr "RESTEasy Reactive クライアント"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2580
msgid "In addition to the Server side, RESTEasy Reactive comes with a new MicroProfile REST Client implementation that is non-blocking at its core."
msgstr "RESTEasy Reactiveには、サーバー側に加えて、ノンブロッキングを核とした新しいMicroProfile Rest Clientの実装が搭載されています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2582
msgid "Please note that the `quarkus-rest-client` extension may not be used with RESTEasy Reactive, use `quarkus-rest-client-reactive` instead."
msgstr "なお、RESTEasy Reactiveでは、 `quarkus-rest-client` エクステンションが正常に動作しない場合があります。 `quarkus-rest-client-reactive` を代わりに使用して下さい。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:2583
msgid "See the xref:rest-client-reactive.adoc[REST Client Reactive Guide] for more information about the reactive REST client."
msgstr "リアクティブ・クライアントの詳細については、link:rest-client-reactive.html[REST Client Reactiveガイド] を参照してください。"
